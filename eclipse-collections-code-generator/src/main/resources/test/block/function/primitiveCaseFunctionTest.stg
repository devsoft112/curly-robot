import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"
isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/block/function/primitive"

fileName(primitive) ::= "<primitive.name>CaseFunctionTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.block.function.primitive;

import org.eclipse.collections.impl.factory.primitive.<name>Lists;
import org.eclipse.collections.impl.list.primitive.IntInterval;
import org.eclipse.collections.impl.test.Verify;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertNull;

/**
 * This file was automatically generated from template file primitiveCaseFunctionTest.stg.
 */
public class <name>CaseFunctionTest
{
    @Test
    public void noopCase()
    {
        <name>CaseFunction\<<wrapperName>\> function = new <name>CaseFunction\<<wrapperName>\>();
        assertNull(function.valueOf(<(literal.(type))("0")>));
    }

    @Test
    public void basicCase()
    {
        <name>CaseFunction\<<wrapperName>\> function = new <name>CaseFunction\<<wrapperName>\>();
        function.addCase(ignored -> true, <wrapperName>::valueOf);
        assertEquals(<wrapperName>.valueOf(<(literal.(type))("0")>), function.valueOf(<(literal.(type))("0")>));
    }

    @Test
    public void defaultValue()
    {
        <name>CaseFunction\<String> function = new <name>CaseFunction\<String>(i -> "Yow!")
                .addCase(i -> <(equals.(type))("i", "0")>, i -> "Patience, grasshopper");

        assertEquals("Yow!", function.valueOf(<(literal.(type))("1")>));

        <name>CaseFunction\<String> function1 = function.setDefault(i -> "Patience, young grasshopper");
        assertSame(function, function1);

        assertEquals("Patience, grasshopper", function.valueOf(<(literal.(type))("0")>));
        assertEquals("Patience, young grasshopper", function.valueOf(<(literal.(type))("1")>));

        Verify.assertContains("<name>CaseFunction", function.toString());
    }

    @Test
    public void fizzBuzz()
    {
        String fizzBuzz = IntInterval.oneTo(20)
                .collect<name>(i -> (<type>) i, <name>Lists.mutable.empty())
                .collect(new <name>CaseFunction\<String>(e -> "")
                        .addCase(e -> <(equals.(type))("e % 15", "0")>, e -> "FizzBuzz")
                        .addCase(e -> <(equals.(type))("e % 3", "0")>, e -> "Fizz")
                        .addCase(e -> <(equals.(type))("e % 5", "0")>, e -> "Buzz"))
                .makeString(":");
        assertEquals(
                "::Fizz::Buzz:Fizz:::Fizz:Buzz::Fizz:::FizzBuzz:::Fizz::Buzz",
                fizzBuzz);
    }
}

>>
