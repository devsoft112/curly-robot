import "copyright.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/block/factory/primitive"

fileName(primitive) ::= "<primitive.name>PredicatesTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.block.factory.primitive;

import org.eclipse.collections.impl.test.Verify;

import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

/**
 * Provides a set of common tests of predicates for <type> values.
 * This file was automatically generated from template file primitivePredicatesTest.stg.
 */
public final class <name>PredicatesTest
{
    @Test
    public void testEqual()
    {
        assertTrue(<name>Predicates.equal(<(literal.(type))("5")>).accept(<(literal.(type))("5")>));
        assertFalse(<name>Predicates.equal(<(literal.(type))("5")>).accept(<(literal.(type))("6")>));
    }

    @Test
    public void testLessThan()
    {
        assertTrue(<name>Predicates.lessThan(<(literal.(type))("5")>).accept(<(literal.(type))("4")>));
        assertFalse(<name>Predicates.lessThan(<(literal.(type))("5")>).accept(<(literal.(type))("6")>));
    }

    @Test
    public void testGreaterThan()
    {
        assertTrue(<name>Predicates.greaterThan(<(literal.(type))("5")>).accept(<(literal.(type))("6")>));
        assertFalse(<name>Predicates.greaterThan(<(literal.(type))("5")>).accept(<(literal.(type))("4")>));
    }

    @Test
    public void alwaysTrue()
    {
        assertTrue(<name>Predicates.alwaysTrue().accept(<(literal.(type))("5")>));
    }

    @Test
    public void alwaysFalse()
    {
        assertFalse(<name>Predicates.alwaysFalse().accept(<(literal.(type))("5")>));
    }

    <(predicatesTest.(type))()>
    @Test
    public void testAnd()
    {
        assertTrue(<name>Predicates.and(<name>Predicates.greaterThan(<(literal.(type))("5")>), <name>Predicates.lessThan(<(literal.(type))("7")>)).accept(<(literal.(type))("6")>));
        assertFalse(<name>Predicates.and(<name>Predicates.greaterThan(<(literal.(type))("5")>), <name>Predicates.lessThan(<(literal.(type))("7")>)).accept(<(literal.(type))("8")>));
        assertFalse(<name>Predicates.and(<name>Predicates.greaterThan(<(literal.(type))("5")>), <name>Predicates.lessThan(<(literal.(type))("7")>)).accept(<(literal.(type))("4")>));
    }

    @Test
    public void testOr()
    {
        assertFalse(<name>Predicates.or(<name>Predicates.lessThan(<(literal.(type))("5")>), <name>Predicates.greaterThan(<(literal.(type))("7")>)).accept(<(literal.(type))("6")>));
        assertTrue(<name>Predicates.or(<name>Predicates.lessThan(<(literal.(type))("5")>), <name>Predicates.greaterThan(<(literal.(type))("7")>)).accept(<(literal.(type))("4")>));
        assertTrue(<name>Predicates.or(<name>Predicates.lessThan(<(literal.(type))("5")>), <name>Predicates.greaterThan(<(literal.(type))("7")>)).accept(<(literal.(type))("8")>));
    }

    @Test
    public void testNot()
    {
        assertFalse(<name>Predicates.not(<name>Predicates.equal(<(literal.(type))("5")>)).accept(<(literal.(type))("5")>));
        assertTrue(<name>Predicates.not(<name>Predicates.equal(<(literal.(type))("5")>)).accept(<(literal.(type))("6")>));
    }

    @Test
    public void classIsNonInstantiable()
    {
        Verify.assertClassNonInstantiable(<name>Predicates.class);
    }
}

>>

predicatesTest ::=[
    "byte": "allIntPredicateTests",
    "short": "allIntPredicateTests",
    "int": "allIntPredicateTests",
    "long": "allIntPredicateTests",
    "char": "allCharPredicateTests",
    "double": "allDoublePredicateTests",
    "float": "allFloatPredicateTests",
    default: "noTests"
]

noTests() ::= ""

allIntPredicateTests() ::= <<
@Test
public void testIsOdd()
{
    assertTrue(<name>Predicates.isOdd().accept(<(literal.(type))("5")>));
    assertFalse(<name>Predicates.isOdd().accept(<(literal.(type))("6")>));
}

@Test
public void testIsEven()
{
    assertTrue(<name>Predicates.isEven().accept(<(literal.(type))("6")>));
    assertFalse(<name>Predicates.isEven().accept(<(literal.(type))("5")>));
}

>>

allCharPredicateTests() ::= <<
@Test
public void testIsUpperCase()
{
    assertTrue(CharPredicates.isUpperCase().accept('A'));
    assertFalse(CharPredicates.isUpperCase().accept('a'));
}

@Test
public void testIsLowerCase()
{
    assertTrue(CharPredicates.isLowerCase().accept('a'));
    assertFalse(CharPredicates.isLowerCase().accept('A'));
}

@Test
public void testIsDigit()
{
    assertTrue(CharPredicates.isDigit().accept('5'));
    assertFalse(CharPredicates.isDigit().accept('a'));
}

@Test
public void testIsDigitOrDot()
{
    assertTrue(CharPredicates.isDigitOrDot().accept('5'));
    assertTrue(CharPredicates.isDigitOrDot().accept('.'));
    assertFalse(CharPredicates.isDigitOrDot().accept('a'));
}

@Test
public void testIsLetter()
{
    assertTrue(CharPredicates.isLetter().accept('a'));
    assertTrue(CharPredicates.isLetter().accept('A'));
    assertFalse(CharPredicates.isLetter().accept('5'));
}

@Test
public void testIsLetterOrDigit()
{
    assertTrue(CharPredicates.isLetterOrDigit().accept('a'));
    assertTrue(CharPredicates.isLetterOrDigit().accept('A'));
    assertTrue(CharPredicates.isLetterOrDigit().accept('5'));
    assertFalse(CharPredicates.isLetterOrDigit().accept('.'));
    assertFalse(CharPredicates.isLetterOrDigit().accept('#'));
}

@Test
public void testisWhitespace()
{
    assertTrue(CharPredicates.isWhitespace().accept(' '));
    assertTrue(CharPredicates.isWhitespace().accept('\n'));
    assertFalse(CharPredicates.isWhitespace().accept('A'));
    assertFalse(CharPredicates.isWhitespace().accept('5'));
    assertFalse(CharPredicates.isWhitespace().accept('.'));
    assertFalse(CharPredicates.isWhitespace().accept('#'));
}

@Test
public void testIsUndefined()
{
    assertTrue(CharPredicates.isUndefined().accept((char) 888));
    assertFalse(CharPredicates.isUndefined().accept('a'));
}

>>

allDoublePredicateTests() ::= <<
@Test
public void equalWithDelta()
{
    assertFalse(DoublePredicates.not(DoublePredicates.equal(5.0, Double.valueOf("1e-15"))).accept(5.0));
    assertFalse(DoublePredicates.not(DoublePredicates.equal(5.0, 2.0)).accept(6.0));
    assertTrue(DoublePredicates.not(DoublePredicates.equal(5.0, Double.valueOf("1e-15"))).accept(6.0));
    assertTrue(DoublePredicates.not(DoublePredicates.equal(5.0, 1.0)).accept(7.0));
}

>>

allFloatPredicateTests() ::= <<
@Test
public void equalWithDelta()
{
    assertFalse(FloatPredicates.not(FloatPredicates.equal(5.0f, Float.valueOf("1e-15"))).accept(5.0f));
    assertFalse(FloatPredicates.not(FloatPredicates.equal(5.0f, 2.0f)).accept(6.0f));
    assertTrue(FloatPredicates.not(FloatPredicates.equal(5.0f, Float.valueOf("1e-15"))).accept(6.0f));
    assertTrue(FloatPredicates.not(FloatPredicates.equal(5.0f, 1.0f)).accept(7.0f));
}

>>

