import "copyrightAndOthers.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/list/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>ListTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.impl.list.mutable.primitive;

import java.util.NoSuchElementException;

import org.eclipse.collections.api.iterator.<name>Iterator;
import org.eclipse.collections.api.iterator.Mutable<name>Iterator;
import org.eclipse.collections.api.stack.primitive.Mutable<name>Stack;
import org.eclipse.collections.impl.factory.primitive.<name>Stacks;
<if(!primitive.booleanPrimitive)>import org.eclipse.collections.impl.block.factory.Comparators;<endif>
import org.eclipse.collections.impl.block.factory.primitive.<name>Predicates;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link Unmodifiable<name>List}.
 * This file was automatically generated from template file unmodifiablePrimitiveListTest.stg.
 */
public class Unmodifiable<name>ListTest extends Abstract<name>ListTestCase
{
    private final Unmodifiable<name>List list = this.classUnderTest();

    @Override
    protected final Unmodifiable<name>List classUnderTest()
    {
        return new Unmodifiable<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Override
    protected Unmodifiable<name>List newWith(<type>... elements)
    {
        return new Unmodifiable<name>List(<name>ArrayList.newListWith(elements));
    }

    @Override
    @Test
    public void addAtIndex()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).addAtIndex(0, <(literal.(type))("1")>));
    }

    @Override
    @Test
    public void addAtIndex_throws_index_greater_than_size()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).addAtIndex(1, <(literal.(type))("0")>));
    }

    @Test
    public void unmodifiableBoxed()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().boxed().add(<(literal.(type))("1")>));
    }

    @Override
    @Test
    public void addAtIndex_throws_index_negative()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.list.addAtIndex(-1, <(literal.(type))("4")>));
    }

    @Override
    @Test
    public void addAll_throws_index_negative()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.list.addAllAtIndex(-1, <["5", "6"]:(literal.(type))(); separator=", ">));
    }

    @Override
    @Test
    public void addAll_throws_index_greater_than_size()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.list.addAllAtIndex(5, <["5", "6"]:(literal.(type))(); separator=", ">));
    }

    @Override
    @Test
    public void addAllIterable_throws_index_negative()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.list.addAllAtIndex(-1, <name>ArrayList.newListWith(<["1", "2"]:(literal.(type))(); separator=", ">)));
    }

    @Override
    @Test
    public void addAllIterable_throws_index_greater_than_size()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.list.addAllAtIndex(5, <name>ArrayList.newListWith(<["1", "2"]:(literal.(type))(); separator=", ">)));
    }

    @Override
    @Test
    public void removeAtIndex()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.list.removeAtIndex(1));
    }

    @Override
    @Test
    public void removeAtIndex_throws_index_greater_than_size()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).removeAtIndex(1));
    }

    @Override
    @Test
    public void removeAtIndex_throws_index_negative()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.list.removeAtIndex(-1));
    }

    @Override
    @Test
    public void set()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.list.set(1, <(literal.(type))("4")>));
    }

    @Override
    @Test
    public void swap()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.list.swap(0, 1));
    }

    @Override
    @Test
    public void clear()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().clear());
    }

    @Override
    @Test
    public void add()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.newWith().add(<(literal.(type))("1")>));
    }

    @Override
    @Test
    public void addAllArray()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().addAll());
    }

    @Override
    @Test
    public void addAllIterable()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().addAll(this.newMutableCollectionWith()));
    }

    @Override
    @Test
    public void remove()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().remove(<(literal.(type))("1")>));
    }

    @Override
    @Test
    public void removeIf()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().removeIf(<name>Predicates.equal(<(literal.(type))("1")>)));
    }

    @Override
    @Test
    public void removeAll()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().removeAll());
    }

    @Override
    @Test
    public void removeAll_iterable()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().removeAll(this.newMutableCollectionWith()));
    }

    @Override
    @Test
    public void retainAll()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().retainAll());
    }

    @Override
    @Test
    public void retainAll_iterable()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().retainAll(this.newMutableCollectionWith()));
    }

    @Override
    @Test
    public void with()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.newWith().with(<["1"]:(literal.(type))(); separator=", ">));
    }

    @Override
    @Test
    public void withAll()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.newWith().withAll(this.newMutableCollectionWith(<(literal.(type))("1")>)));
    }

    @Override
    @Test
    public void without()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.newWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">).without(<(literal.(type))("9")>));
    }

    @Override
    @Test
    public void withoutAll()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
                this.newWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">).withoutAll(this.newMutableCollectionWith(<["8", "9"]:(literal.(type))(); separator=", ">)));
    }

    @Override
    @Test
    public void reverseThis()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).reverseThis());
    }

    @Override
    @Test
    public void sortThis()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).sortThis());
    }

    @Override
    @Test
    public void sortWithPrimitiveComparator()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).sortThis(<wrapperName>::compare));
    }

    @Override
    @Test
    public void sortWithOddEvenComparator()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList())
                .sortThis((a, b) -> (int) ((int) ((int) a & 1) - ((int) b & 1))));
    }

    @Override
    @Test
    public void sortWithKeyExtractorNaturalComparator()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).sortThisBy(<wrapperName>::toString));
    }

    @Override
    @Test
    public void sortWithKeyExtractorUnnaturalComparator()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList())
                .sortThisBy(<wrapperName>::toString, Comparators.naturalOrder().reversed()));
    }

    @Override
    @Test
    public void sortShuffledInputWithDupes()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).sortThis());
    }

    @Override
    @Test
    public void sortShuffledInput()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).sortThis());
    }

    @Override
    @Test
    public void sortSortedInput()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).sortThis());
    }

    @Override
    @Test
    public void sortReversedSortedInput()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).sortThis());
    }

    @Override
    @Test
    public void shuffleThis()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () ->
            new Unmodifiable<name>List(new <name>ArrayList()).shuffleThis());
    }

    @Override
    @Test
    public void contains()
    {
        Unmodifiable<name>List collection = this.newWith(<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">);
        Assert.assertFalse(collection.contains(<(literal.(type))("29")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("49")>));

        <type>[] numbers = {<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">};
        for (<type> number : numbers)
        {
            Assert.assertTrue(collection.contains(number));
        }

        Assert.assertFalse(collection.contains(<(literal.(type))("-1")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("29")>));
        Assert.assertFalse(collection.contains(<(literal.(type))("49")>));

        Unmodifiable<name>List collection1 = this.newWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">);
        Assert.assertTrue(collection1.contains(<(literal.(type))("0")>));
        Assert.assertTrue(collection1.contains(<(literal.(type))("1")>));
        Assert.assertTrue(collection1.contains(<(literal.(type))("2")>));
        Assert.assertFalse(collection1.contains(<(literal.(type))("3")>));
    }

    @Override
    @Test
    public void <type>Iterator_throws_non_empty_collection()
    {
        Unmodifiable<name>List collection = this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">);
        <name>Iterator iterator = collection.<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }
        Assert.assertThrows(NoSuchElementException.class, () -> iterator.next());
    }

    @Override
    @Test
    public void asUnmodifiable()
    {
        super.asUnmodifiable();
        Assert.assertSame(this.list, this.list.asUnmodifiable());
        Assert.assertEquals(this.list, this.list.asUnmodifiable());
    }

    @Override
    @Test
    public void <type>Iterator_with_remove()
    {
        Unmodifiable<name>List unmodifiable<name>List = this.classUnderTest();
        Mutable<name>Iterator iterator = unmodifiable<name>List.<type>Iterator();
        Assert.assertTrue(iterator.hasNext());
        iterator.next();
        Assert.assertThrows(UnsupportedOperationException.class, iterator::remove);
    }

    @Override
    @Test
    public void <type>Iterator_throws_for_remove_before_next()
    {
        Unmodifiable<name>List unmodifiable<name>List = this.classUnderTest();
        Mutable<name>Iterator iterator = unmodifiable<name>List.<type>Iterator();
        Assert.assertTrue(iterator.hasNext());
        Assert.assertThrows(UnsupportedOperationException.class, iterator::remove);
    }

    @Override
    @Test
    public void <type>Iterator_throws_for_consecutive_remove()
    {
        // Not applicable for Unmodifiable*
    }

    @Test
    public void toStack()
    {
        Mutable<name>Stack stack = <name>Stacks.mutable.withAll(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(stack, this.classUnderTest().toStack());
    }
}

>>
