import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

skipBooleanKeys() ::= "true"

hasTwoPrimitives() ::= "true"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/immutable/primitive"

fileName(primitive1, primitive2, sameTwoPrimitives) ::= "Immutable<primitive1.name><primitive2.name>HashMapKeyValuesViewTest"

class(primitive1, primitive2, sameTwoPrimitives) ::= <<
<body(primitive1.type, primitive2.type, primitive1.name, primitive2.name)>
>>

body(type1, type2, name1, name2) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.immutable.primitive;

import org.eclipse.collections.api.map.primitive.Immutable<name1><name2>Map;
import org.eclipse.collections.impl.map.mutable.primitive.<name1><name2>HashMap;
import org.eclipse.collections.impl.map.primitive.Abstract<name1><name2>MapKeyValuesViewTestCase;

/**
 * JUnit test for {@link Immutable<name1><name2>HashMap#keyValuesView()}.
 * This file was automatically generated from template file immutablePrimitivePrimitiveHashMapKeyValuesViewTest.stg.
 */
public class Immutable<name1><name2>HashMapKeyValuesViewTest extends Abstract<name1><name2>MapKeyValuesViewTestCase
{
    @Override
    public Immutable<name1><name2>Map newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2, <type1> key3, <type2> value3)
    {
        return <name1><name2>HashMap.newWithKeysValues(key1, value1, key2, value2, key3, value3).toImmutable();
    }

    @Override
    public Immutable<name1><name2>Map newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2)
    {
        return <name1><name2>HashMap.newWithKeysValues(key1, value1, key2, value2).toImmutable();
    }

    @Override
    public Immutable<name1><name2>Map newWithKeysValues(<type1> key1, <type2> value1)
    {
        return <name1><name2>HashMap.newWithKeysValues(key1, value1).toImmutable();
    }

    @Override
    public Immutable<name1><name2>Map newEmpty()
    {
        return new <name1><name2>HashMap().toImmutable();
    }
}

>>
