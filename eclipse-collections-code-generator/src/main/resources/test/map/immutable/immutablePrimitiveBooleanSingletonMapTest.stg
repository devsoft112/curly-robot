import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

skipBoolean() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/immutable/primitive"

fileName(primitive) ::= "Immutable<primitive.name>BooleanSingletonMapTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.immutable.primitive;

import java.util.NoSuchElementException;

import org.eclipse.collections.api.BooleanIterable;
import org.eclipse.collections.api.iterator.BooleanIterator;
import org.eclipse.collections.api.map.primitive.<name>BooleanMap;
import org.eclipse.collections.api.map.primitive.Immutable<name>BooleanMap;
import org.eclipse.collections.impl.block.factory.primitive.BooleanPredicates;
import org.eclipse.collections.impl.factory.primitive.BooleanBags;
import org.eclipse.collections.impl.factory.primitive.<name>BooleanMaps;
import org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayList;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.map.mutable.primitive.<name>BooleanHashMap;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertNotSame;

/**
 * JUnit test for {@link Immutable<name>BooleanSingletonMap}.
 * This file was automatically generated from template file immutablePrimitiveBooleanSingletonMapTest.stg.
 */
public class Immutable<name>BooleanSingletonMapTest extends AbstractImmutable<name>BooleanMapTestCase
{
    @Override
    protected Immutable<name>BooleanMap classUnderTest()
    {
        return <name>BooleanMaps.immutable.with(<(literal.(type))("0")>, true);
    }

    @Test
    public void newWithKeyValue()
    {
        Immutable<name>BooleanMap map1 = this.classUnderTest();
        Immutable<name>BooleanMap expected = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, true);
        assertEquals(expected, map1.newWithKeyValue(<(literal.(type))("1")>, true));
        assertNotSame(map1, map1.newWithKeyValue(<(literal.(type))("1")>, true));
    }

    @Test
    public void newWithoutKeyValue()
    {
        Immutable<name>BooleanMap map1 = this.classUnderTest();
        assertEquals(map1, map1.newWithoutKey(<(literal.(type))("32")>));
        assertSame(map1, map1.newWithoutKey(<(literal.(type))("32")>));
        assertEquals(this.classUnderTest(), map1);

        Immutable<name>BooleanMap map2 = this.classUnderTest();
        assertEquals(this.getEmptyMap(), map2.newWithoutKey(<(literal.(type))("0")>));
        assertNotSame(map2, map2.newWithoutKey(<(literal.(type))("0")>));
        assertEquals(this.classUnderTest(), map2);
    }

    @Test
    public void newWithoutAllKeys()
    {
        Immutable<name>BooleanMap map1 = this.classUnderTest();
        assertEquals(this.getEmptyMap(), map1.newWithoutAllKeys(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("32")>)));
        assertNotSame(map1, map1.newWithoutAllKeys(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("32")>)));
        assertEquals(this.classUnderTest(), map1);

        Immutable<name>BooleanMap map2 = this.classUnderTest();
        assertEquals(map2, map2.newWithoutAllKeys(<name>ArrayList.newListWith(<(literal.(type))("31")>, <(literal.(type))("32")>)));
        assertEquals(this.classUnderTest(), map2);
    }

    @Override
    @Test
    public void containsValue()
    {
        assertTrue(this.classUnderTest().containsValue(true));
        assertFalse(this.classUnderTest().containsValue(false));
    }

    @Override
    @Test
    public void contains()
    {
        assertTrue(this.classUnderTest().contains(true));
        assertFalse(this.classUnderTest().contains(false));
    }

    @Override
    @Test
    public void getIfAbsent()
    {
        assertTrue(this.classUnderTest().getIfAbsent(<(literal.(type))("0")>, false));
        assertTrue(this.classUnderTest().getIfAbsent(<(literal.(type))("31")>, true));
        assertFalse(this.classUnderTest().getIfAbsent(<(literal.(type))("32")>, false));
    }

    @Override
    @Test
    public void asLazy()
    {
        assertEquals(BooleanArrayList.newListWith(true), this.classUnderTest().asLazy().toList());
    }

    @Override
    @Test
    public void booleanIterator()
    {
        BooleanIterator iterator = this.classUnderTest().booleanIterator();
        assertTrue(iterator.hasNext());
        assertTrue(iterator.next());
        assertFalse(iterator.hasNext());
        assertThrows(NoSuchElementException.class, iterator::next);
    }

    @Override
    @Test
    public void getOrThrow()
    {
        assertTrue(this.classUnderTest().getOrThrow(<(literal.(type))("0")>));

        assertThrows(IllegalStateException.class, () -> this.classUnderTest().getOrThrow(<(literal.(type))("31")>));
        assertThrows(IllegalStateException.class, () -> this.classUnderTest().getOrThrow(<(literal.(type))("32")>));
    }

    @Override
    @Test
    public void get()
    {
        assertTrue(this.classUnderTest().get(<(literal.(type))("0")>));
        assertFalse(this.classUnderTest().get(<(literal.(type))("31")>));
        assertFalse(this.classUnderTest().get(<(literal.(type))("32")>));
    }

    @Override
    @Test
    public void containsAll()
    {
        assertFalse(this.classUnderTest().containsAll(true, false));
        assertFalse(this.classUnderTest().containsAll(false));
        assertTrue(this.classUnderTest().containsAll(true));
        assertTrue(this.classUnderTest().containsAll());
    }

    @Override
    @Test
    public void containsKey()
    {
        assertTrue(this.classUnderTest().containsKey(<(literal.(type))("0")>));
        assertFalse(this.classUnderTest().containsKey(<(literal.(type))("31")>));
        assertFalse(this.classUnderTest().containsKey(<(literal.(type))("32")>));
    }

    @Override
    @Test
    public void keysView()
    {
        assertEquals(<name>ArrayList.newListWith(<(literal.(type))("0")>), this.classUnderTest().keysView().toSortedList());
    }

    @Override
    @Test
    public void containsAllIterable()
    {
        assertFalse(this.classUnderTest().containsAll(BooleanArrayList.newListWith(true, false)));
        assertFalse(this.classUnderTest().containsAll(BooleanArrayList.newListWith(false)));
        assertTrue(this.classUnderTest().containsAll(BooleanArrayList.newListWith(true)));
        assertTrue(this.classUnderTest().containsAll(new BooleanArrayList()));
    }

    @Override
    @Test
    public void anySatisfy()
    {
        assertTrue(this.classUnderTest().anySatisfy(BooleanPredicates.isTrue()));
        assertFalse(this.classUnderTest().anySatisfy(BooleanPredicates.isFalse()));
    }

    @Override
    @Test
    public void allSatisfy()
    {
        assertTrue(this.classUnderTest().allSatisfy(BooleanPredicates.isTrue()));
        assertFalse(this.classUnderTest().allSatisfy(BooleanPredicates.isFalse()));
    }

    @Override
    @Test
    public void noneSatisfy()
    {
        assertFalse(this.classUnderTest().noneSatisfy(BooleanPredicates.isTrue()));
        assertTrue(this.classUnderTest().noneSatisfy(BooleanPredicates.isFalse()));
    }

    @Override
    @Test
    public void select()
    {
        <name>BooleanMap actual1 = this.classUnderTest().select((<type> key, boolean value) -> <(equals.(type))("key", {<(literal.(type))("0")>})>);
        assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true), actual1);
        <name>BooleanMap actual2 = this.classUnderTest().select((<type> key, boolean value) -> <(equals.(type))("key", {<(literal.(type))("1")>})>);
        assertEquals(this.getEmptyMap(), actual2);
    }

    @Override
    @Test
    public void reject()
    {
        <name>BooleanMap actual1 = this.classUnderTest().reject((<type> key, boolean value) -> <(equals.(type))("key", {<(literal.(type))("1")>})>);
        assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true), actual1);
        <name>BooleanMap actual2 = this.classUnderTest().reject((<type> key, boolean value) -> <(equals.(type))("key", {<(literal.(type))("0")>})>);
        assertEquals(this.getEmptyMap(), actual2);
    }

    @Override
    @Test
    public void select_value()
    {
        BooleanIterable actual1 = this.classUnderTest().select(BooleanPredicates.isFalse());
        assertEquals(BooleanBags.immutable.empty(), actual1);

        BooleanIterable actual2 = this.classUnderTest().select(BooleanPredicates.isTrue());
        assertEquals(BooleanBags.immutable.with(true), actual2);
    }

    @Override
    @Test
    public void reject_value()
    {
        BooleanIterable actual1 = this.classUnderTest().reject(BooleanPredicates.isTrue());
        assertEquals(BooleanBags.immutable.empty(), actual1);

        BooleanIterable actual2 = this.classUnderTest().reject(BooleanPredicates.isFalse());
        assertEquals(BooleanBags.immutable.with(true), actual2);
    }

    @Override
    @Test
    public void count()
    {
        assertEquals(0, this.classUnderTest().count(BooleanPredicates.isFalse()));
        assertEquals(1, this.classUnderTest().count(BooleanPredicates.isTrue()));
    }
}

>>
