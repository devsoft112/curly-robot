import "copyrightAndOthers.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Object<primitive.name>HashMapValuesTestCase"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.impl.map.mutable.primitive;

import java.util.NoSuchElementException;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.collection.primitive.Mutable<name>Collection;
import org.eclipse.collections.api.iterator.<name>Iterator;
import org.eclipse.collections.api.iterator.Mutable<name>Iterator;
import org.eclipse.collections.api.list.MutableList;
import org.eclipse.collections.api.map.primitive.MutableObject<name>Map;
import org.eclipse.collections.api.set.MutableSet;
import org.eclipse.collections.impl.factory.Lists;
import org.eclipse.collections.impl.block.factory.primitive.<name>Predicates;
import org.eclipse.collections.impl.factory.primitive.<name>Bags;
import org.eclipse.collections.impl.collection.mutable.primitive.AbstractMutable<name>CollectionTestCase;
import org.eclipse.collections.impl.collection.mutable.primitive.Synchronized<name>Collection;
import org.eclipse.collections.impl.collection.mutable.primitive.Unmodifiable<name>Collection;
import org.eclipse.collections.impl.list.mutable.FastList;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.test.Verify;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;

/**
 * This file was automatically generated from template file objectPrimitiveHashMapValuesTestCase.stg.
 */
public abstract class Object<name>HashMapValuesTestCase extends AbstractMutable<name>CollectionTestCase
{
    public abstract MutableObject<name>Map\<String> newMapWithKeysValues(String key1, <type> value1);

    public abstract MutableObject<name>Map\<String> newMapWithKeysValues(String key1, <type> value1, String key2, <type> value2);

    public abstract MutableObject<name>Map\<String> newMapWithKeysValues(String key1, <type> value1, String key2, <type> value2, String key3, <type> value3);

    public abstract MutableObject<name>Map\<String> newMapWithKeysValues(String key1, <type> value1, String key2, <type> value2, String key3, <type> value3, String key4, <type> value4);

    public abstract MutableObject<name>Map\<String> newEmptyMap();

    @Override
    protected Mutable<name>Collection classUnderTest()
    {
        return this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">).values();
    }

    @Override
    protected Mutable<name>Collection newWith(<type>... elements)
    {
        MutableObject<name>Map map = this.newEmptyMap();
        for (int i = 0; i \< elements.length; i++)
        {
            map.put(String.valueOf(i), elements[i]);
        }
        return map.values();
    }

    @Override
    protected Mutable<name>Collection newMutableCollectionWith(<type>... elements)
    {
        return this.newWith(elements);
    }

    @Override
    protected MutableList\<<wrapperName>\> newObjectCollectionWith(<wrapperName>... elements)
    {
        return FastList.newListWith(elements);
    }

    @Override
    @Test
    public void <type>Iterator()
    {
        Mutable<name>Collection bag = this.newWith(<["0", "1", "2", "3"]:(literal.(type))(); separator=", ">);
        <name>ArrayList list = <name>ArrayList.newListWith(<["0", "1", "2", "3"]:(literal.(type))(); separator=", ">);
        <name>Iterator iterator1 = bag.<type>Iterator();
        for (int i = 0; i \< 4; i++)
        {
            assertTrue(iterator1.hasNext());
            assertTrue(list.remove(iterator1.next()));
        }
        Verify.assertEmpty(list);
        assertFalse(iterator1.hasNext());

        assertThrows(NoSuchElementException.class, iterator1::next);

        MutableObject<name>Map\<String> map2 = new Object<name>HashMap\<>();
        for (<type> each = <(literal.(type))("2")>; each \< <(literal.(type))("100")>; each++)
        {
            map2.put(String.valueOf(each), each);
        }
        Mutable<name>Iterator iterator2 = map2.<type>Iterator();
        while (iterator2.hasNext())
        {
            iterator2.next();
            iterator2.remove();
        }
        assertTrue(map2.isEmpty());
    }

    @Override
    @Test
    public void addAllIterable()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                 this.classUnderTest().addAll(new <name>ArrayList()));
    }

    @Override
    @Test
    public void add()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().add(<(literal.(type))("0")>));
    }

    <if(primitive.floatingPoint)><NaNTests()><endif>
    @Override
    @Test
    public void addAllArray()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().addAll(<["0", "1"]:(literal.(type))(); separator=", ">));
    }

    @Override
    @Test
    public void with()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().with(<(literal.(type))("0")>));
    }

    @Override
    @Test
    public void without()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().without(<(literal.(type))("0")>));
    }

    @Override
    @Test
    public void withAll()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().withAll(new <name>ArrayList()));
    }

    @Override
    @Test
    public void withoutAll()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().withoutAll(new <name>ArrayList()));
    }

    @Override
    @Test
    public void remove()
    {
        MutableObject<name>Map\<String> map = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        Mutable<name>Collection collection = map.values();
        assertTrue(collection.remove(<(literal.(type))("3")>));
        assertFalse(collection.contains(<(literal.(type))("3")>));
        assertTrue(collection.contains(<(literal.(type))("1")>));
        assertTrue(collection.contains(<(literal.(type))("2")>));
        assertFalse(map.contains(<(literal.(type))("3")>));
        assertTrue(map.contains(<(literal.(type))("1")>));
        assertTrue(map.contains(<(literal.(type))("2")>));
    }

    @Override
    @Test
    public void removeIf()
    {
        MutableObject<name>Map\<String> map = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        Mutable<name>Collection collection = map.values();
        assertTrue(collection.removeIf(<name>Predicates.equal(<(literal.(type))("3")>)));
        assertFalse(collection.contains(<(literal.(type))("3")>));
        assertTrue(collection.contains(<(literal.(type))("1")>));
        assertTrue(collection.contains(<(literal.(type))("2")>));
        assertFalse(map.contains(<(literal.(type))("3")>));
        assertTrue(map.contains(<(literal.(type))("1")>));
        assertTrue(map.contains(<(literal.(type))("2")>));
        assertFalse(collection.removeIf(<name>Predicates.equal(<(literal.(type))("3")>)));
    }

    @Override
    @Test
    public void removeAll()
    {
        assertFalse(this.newWith().removeAll());
        assertFalse(this.newWith().removeAll(<(literal.(type))("1")>));

        MutableObject<name>Map\<String> map = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        Mutable<name>Collection collection = map.values();
        assertFalse(collection.removeAll());

        assertTrue(collection.removeAll(<(literal.(type))("1")>, <(literal.(type))("5")>));
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertTrue(collection.contains(<(literal.(type))("2")>));
        assertTrue(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertTrue(map.contains(<(literal.(type))("2")>));
        assertTrue(map.contains(<(literal.(type))("3")>));

        assertTrue(collection.removeAll(<(literal.(type))("3")>, <(literal.(type))("2")>));
        assertTrue(collection.isEmpty());
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertFalse(collection.contains(<(literal.(type))("2")>));
        assertFalse(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertFalse(map.contains(<(literal.(type))("2")>));
        assertFalse(map.contains(<(literal.(type))("3")>));
        assertTrue(map.isEmpty());
    }

    @Override
    @Test
    public void removeAll_iterable()
    {
        assertFalse(this.newWith().removeAll(new <name>ArrayList()));
        assertFalse(this.newWith().removeAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));

        MutableObject<name>Map\<String> map = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        Mutable<name>Collection collection = map.values();
        assertFalse(collection.removeAll());

        assertTrue(collection.removeAll(<name>ArrayList.newListWith(<(literal.(type))("1")>, <(literal.(type))("5")>)));
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertTrue(collection.contains(<(literal.(type))("2")>));
        assertTrue(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertTrue(map.contains(<(literal.(type))("2")>));
        assertTrue(map.contains(<(literal.(type))("3")>));

        assertTrue(collection.removeAll(<name>ArrayList.newListWith(<(literal.(type))("3")>, <(literal.(type))("2")>)));
        assertTrue(collection.isEmpty());
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertFalse(collection.contains(<(literal.(type))("2")>));
        assertFalse(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertFalse(map.contains(<(literal.(type))("2")>));
        assertFalse(map.contains(<(literal.(type))("3")>));
        assertTrue(map.isEmpty());
    }

    @Override
    @Test
    public void retainAll()
    {
        assertFalse(this.newWith().retainAll());
        assertFalse(this.newWith().retainAll(<(literal.(type))("1")>));

        MutableObject<name>Map\<String> map = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        Mutable<name>Collection collection = map.values();
        assertFalse(collection.retainAll(<(literal.(type))("1")>, <(literal.(type))("2")>, <(literal.(type))("3")>));

        assertTrue(collection.retainAll(<(literal.(type))("2")>, <(literal.(type))("3")>, <(literal.(type))("5")>));
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertTrue(collection.contains(<(literal.(type))("2")>));
        assertTrue(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertTrue(map.contains(<(literal.(type))("2")>));
        assertTrue(map.contains(<(literal.(type))("3")>));

        assertTrue(collection.retainAll(<(literal.(type))("1")>, <(literal.(type))("0")>, <(literal.(type))("4")>));
        assertTrue(collection.isEmpty());
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertFalse(collection.contains(<(literal.(type))("2")>));
        assertFalse(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertFalse(map.contains(<(literal.(type))("2")>));
        assertFalse(map.contains(<(literal.(type))("3")>));
        assertTrue(map.isEmpty());
    }

    @Override
    @Test
    public void retainAll_iterable()
    {
        assertFalse(this.newWith().retainAll(new <name>ArrayList()));
        assertFalse(this.newWith().retainAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));

        MutableObject<name>Map\<String> map = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        Mutable<name>Collection collection = map.values();
        assertFalse(collection.retainAll(<name>ArrayList.newListWith(<(literal.(type))("1")>, <(literal.(type))("2")>, <(literal.(type))("3")>)));

        assertTrue(collection.retainAll(<name>ArrayList.newListWith(<(literal.(type))("2")>, <(literal.(type))("3")>, <(literal.(type))("5")>)));
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertTrue(collection.contains(<(literal.(type))("2")>));
        assertTrue(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertTrue(map.contains(<(literal.(type))("2")>));
        assertTrue(map.contains(<(literal.(type))("3")>));

        assertTrue(collection.retainAll(<name>ArrayList.newListWith(<(literal.(type))("1")>, <(literal.(type))("0")>, <(literal.(type))("4")>)));
        assertTrue(collection.isEmpty());
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertFalse(collection.contains(<(literal.(type))("2")>));
        assertFalse(collection.contains(<(literal.(type))("3")>));
        assertFalse(map.contains(<(literal.(type))("1")>));
        assertFalse(map.contains(<(literal.(type))("2")>));
        assertFalse(map.contains(<(literal.(type))("3")>));
        assertTrue(map.isEmpty());
    }

    @Override
    @Test
    public void clear()
    {
        Mutable<name>Collection emptyCollection = this.newWith();
        emptyCollection.clear();
        Verify.assertSize(0, emptyCollection);

        MutableObject<name>Map\<String> map = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        Mutable<name>Collection collection = map.values();
        collection.clear();
        Verify.assertEmpty(collection);
        Verify.assertEmpty(map);
        Verify.assertSize(0, collection);
        assertFalse(collection.contains(<(literal.(type))("0")>));
        assertFalse(collection.contains(<(literal.(type))("1")>));
        assertFalse(collection.contains(<(literal.(type))("2")>));
        assertFalse(collection.contains(<(literal.(type))("3")>));

        Mutable<name>Collection collection1 = this.newWith(<["0", "1", "31", "32"]:(literal.(type))(); separator=", ">);
        collection1.clear();
        Verify.assertEmpty(collection1);
        Verify.assertSize(0, collection1);
        assertFalse(collection1.contains(<(literal.(type))("0")>));
        assertFalse(collection1.contains(<(literal.(type))("1")>));
        assertFalse(collection1.contains(<(literal.(type))("31")>));
        assertFalse(collection1.contains(<(literal.(type))("32")>));

        Mutable<name>Collection collection2 = this.newWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">);
        collection2.clear();
        Verify.assertSize(0, collection2);
    }

    @Override
    @Test
    public void contains()
    {
        Mutable<name>Collection collection = this.newWith(<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">);
        assertFalse(collection.contains(<(literal.(type))("29")>));
        assertFalse(collection.contains(<(literal.(type))("49")>));

        <type>[] numbers = {<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">};
        for (<type> number : numbers)
        {
            assertTrue(collection.contains(number));
            assertTrue(collection.remove(number));
            assertFalse(collection.contains(number));
        }

        assertFalse(collection.contains(<(literal.(type))("29")>));
        assertFalse(collection.contains(<(literal.(type))("49")>));
    }

    @Override
    @Test
    public void reject()
    {
        <name>Iterable iterable = this.classUnderTest();
        Verify.assertSize(0, iterable.reject(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(1, iterable.reject(<name>Predicates.lessThan(<(literal.(type))("3")>)));
    }

    @Override
    @Test
    public void select()
    {
        <name>Iterable iterable = this.classUnderTest();
        Verify.assertSize(3, iterable.select(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(2, iterable.select(<name>Predicates.lessThan(<(literal.(type))("3")>)));
    }

    @Override
    @Test
    public void collect()
    {
        <name>ToObjectFunction\<<wrapperName>\> function = (<type> parameter) -> <(castIntToNarrowTypeWithParens.(type))("parameter - 1")>;
        assertEquals(this.newObjectCollectionWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">).toBag(), this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).collect(function).toBag());
        <name>Iterable iterable = this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">);
        assertEquals(this.newObjectCollectionWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">).toBag(), iterable.collect(function).toBag());
        assertEquals(this.newObjectCollectionWith(), this.newWith().collect(function));
        assertEquals(this.newObjectCollectionWith(<(literal.(type))("2")>), this.newWith(<(literal.(type))("3")>).collect(function));
    }

    @Override
    @Test
    public void makeString()
    {
        assertEquals("<(toStringLiteral.(type))("1")>", this.newWith(<(literal.(type))("1")>).makeString("/"));
        assertEquals("<(toStringLiteral.(type))("31")>", this.newWith(<(literal.(type))("31")>).makeString());
        assertEquals("<(toStringLiteral.(type))("32")>", this.newWith(<(literal.(type))("32")>).makeString());
        assertEquals("", this.newWith().makeString());
        assertEquals("", this.newWith().makeString("/"));
        assertEquals("[]", this.newWith().makeString("[", ", ", "]"));

        <name>Iterable iterable1 = this.newWith(<["0", "31"]:(literal.(type))(); separator=", ">);
        assertTrue(
                iterable1.makeString(),
                iterable1.makeString().equals("<["0", "31"]:(toStringLiteral.(type))(); separator=", ">")
                        || iterable1.makeString().equals("<["31", "0"]:(toStringLiteral.(type))(); separator=", ">"));

        <name>Iterable iterable2 = this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">);
        assertTrue(
                iterable2.makeString("[", "/", "]"),
                iterable2.makeString("[", "/", "]").equals("[<["31", "32"]:(toStringLiteral.(type))(); separator="/">]")
                        || iterable2.makeString("[", "/", "]").equals("[<["32", "31"]:(toStringLiteral.(type))(); separator="/">]"));

        <name>Iterable iterable3 = this.newWith(<["32", "33"]:(literal.(type))(); separator=", ">);
        assertTrue(
                iterable3.makeString("/"),
                iterable3.makeString("/").equals("<["32", "33"]:(toStringLiteral.(type))(); separator="/">")
                        || iterable3.makeString("/").equals("<["33", "32"]:(toStringLiteral.(type))(); separator="/">"));

        <name>Iterable iterable4 = this.newWith(<["1", "2"]:(literal.(type))(); separator=", ">);
        assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator=", ">".equals(iterable4.makeString())
                || "<["2", "1"]:(toStringLiteral.(type))(); separator=", ">".equals(iterable4.makeString()));
        assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator="/">".equals(iterable4.makeString("/"))
                || "<["2", "1"]:(toStringLiteral.(type))(); separator="/">".equals(iterable4.makeString("/")));
        assertTrue("[<["1", "2"]:(toStringLiteral.(type))(); separator="/">]".equals(iterable4.makeString("[", "/", "]"))
                || "[<["2", "1"]:(toStringLiteral.(type))(); separator="/">]".equals(iterable4.makeString("[", "/", "]")));

        <name>Iterable iterable5 = this.newWith(<["0", "1"]:(literal.(type))(); separator=", ">);
        assertTrue(
                iterable5.makeString(),
                iterable5.makeString().equals("<["0", "1"]:(toStringLiteral.(type))(); separator=", ">")
                        || iterable5.makeString().equals("<["1", "0"]:(toStringLiteral.(type))(); separator=", ">"));
        assertTrue(
                iterable5.makeString("[", "/", "]"),
                iterable5.makeString("[", "/", "]").equals("[<["0", "1"]:(toStringLiteral.(type))(); separator="/">]")
                        || iterable5.makeString("[", "/", "]").equals("[<["1", "0"]:(toStringLiteral.(type))(); separator="/">]"));
        assertTrue(
                iterable5.makeString("/"),
                iterable5.makeString("/").equals("<["0", "1"]:(toStringLiteral.(type))(); separator="/">")
                        || iterable5.makeString("/").equals("<["1", "0"]:(toStringLiteral.(type))(); separator="/">"));
    }

    @Override
    @Test
    public void appendString()
    {
        StringBuilder appendable = new StringBuilder();
        this.newWith().appendString(appendable);
        assertEquals("", appendable.toString());
        this.newWith().appendString(appendable, "/");
        assertEquals("", appendable.toString());
        this.newWith().appendString(appendable, "[", ", ", "]");
        assertEquals("[]", appendable.toString());
        StringBuilder appendable1 = new StringBuilder();
        this.newWith(<(literal.(type))("1")>).appendString(appendable1);
        assertEquals("<(toStringLiteral.(type))("1")>", appendable1.toString());
        StringBuilder appendable2 = new StringBuilder();

        <name>Iterable iterable = this.newWith(<["1", "2"]:(literal.(type))(); separator=", ">);
        iterable.appendString(appendable2);
        assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable2.toString())
                || "<["2", "1"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable2.toString()));
        StringBuilder appendable3 = new StringBuilder();
        iterable.appendString(appendable3, "/");
        assertTrue("<["1", "2"]:(toStringLiteral.(type))(); separator="/">".equals(appendable3.toString())
                || "<["2", "1"]:(toStringLiteral.(type))(); separator="/">".equals(appendable3.toString()));

        StringBuilder appendable5 = new StringBuilder();
        this.newWith(<(literal.(type))("31")>).appendString(appendable5);
        assertEquals("<(toStringLiteral.(type))("31")>", appendable5.toString());

        StringBuilder appendable6 = new StringBuilder();
        this.newWith(<(literal.(type))("32")>).appendString(appendable6);
        assertEquals("<(toStringLiteral.(type))("32")>", appendable6.toString());

        StringBuilder appendable7 = new StringBuilder();
        <name>Iterable iterable1 = this.newWith(<["0", "31"]:(literal.(type))(); separator=", ">);
        iterable1.appendString(appendable7);
        assertTrue(appendable7.toString(), "<["0", "31"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable7.toString())
                || "<["31", "0"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable7.toString()));

        StringBuilder appendable8 = new StringBuilder();
        <name>Iterable iterable2 = this.newWith(<["31", "32"]:(literal.(type))(); separator=", ">);
        iterable2.appendString(appendable8, "/");
        assertTrue(appendable8.toString(), "<["31", "32"]:(toStringLiteral.(type))(); separator="/">".equals(appendable8.toString())
                || "<["32", "31"]:(toStringLiteral.(type))(); separator="/">".equals(appendable8.toString()));

        StringBuilder appendable9 = new StringBuilder();
        <name>Iterable iterable4 = this.newWith(<["32", "33"]:(literal.(type))(); separator=", ">);
        iterable4.appendString(appendable9, "[", "/", "]");
        assertTrue(appendable9.toString(), "[<["32", "33"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable9.toString())
                || "[<["33", "32"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable9.toString()));

        StringBuilder appendable10 = new StringBuilder();
        <name>Iterable iterable5 = this.newWith(<["0", "1"]:(literal.(type))(); separator=", ">);
        iterable5.appendString(appendable10);
        assertTrue(appendable10.toString(), "<["0", "1"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable10.toString())
                || "<["1", "0"]:(toStringLiteral.(type))(); separator=", ">".equals(appendable10.toString()));
        StringBuilder appendable11 = new StringBuilder();
        iterable5.appendString(appendable11, "/");
        assertTrue(appendable11.toString(), "<["0", "1"]:(toStringLiteral.(type))(); separator="/">".equals(appendable11.toString())
                || "<["1", "0"]:(toStringLiteral.(type))(); separator="/">".equals(appendable11.toString()));
        StringBuilder appendable12 = new StringBuilder();
        iterable5.appendString(appendable12, "[", "/", "]");
        assertTrue(appendable12.toString(), "[<["0", "1"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable12.toString())
                || "[<["1", "0"]:(toStringLiteral.(type))(); separator="/">]".equals(appendable12.toString()));
    }

    @Override
    @Test
    public void asSynchronized()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Verify.assertInstanceOf(Synchronized<name>Collection.class, this.classUnderTest().asSynchronized());
        assertTrue(collection.asSynchronized().containsAll(this.classUnderTest()));
    }

    @Override
    @Test
    public void asUnmodifiable()
    {
        Mutable<name>Collection collection = this.classUnderTest();
        Verify.assertInstanceOf(Unmodifiable<name>Collection.class, this.classUnderTest().asUnmodifiable());
        assertTrue(collection.asUnmodifiable().containsAll(this.classUnderTest()));
    }

    @Override
    public void testEquals()
    {
        // Testing equals() is not applicable for Mutable<name>Collection.
    }

    @Override
    public void testToString()
    {
        // Testing toString() is not applicable for Mutable<name>Collection.
    }

    @Override
    public void testHashCode()
    {
        // Testing hashCode() is not applicable for Mutable<name>Collection.
    }

    @Override
    public void newCollection()
    {
        // Testing newCollection() is not applicable for Mutable<name>Collection.
    }

    @Override
    @Test
    public void chunk()
    {
        <name>Iterable iterable = this.newMapWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(
                Lists.mutable.with(
                        <name>Bags.mutable.with(<["1"]:(literal.(type))(); separator=", ">),
                        <name>Bags.mutable.with(<["2"]:(literal.(type))(); separator=", ">),
                        <name>Bags.mutable.with(<["3"]:(literal.(type))(); separator=", ">)).toSet(),
                iterable.chunk(1).toSet());

        MutableSet\<<name>Iterable> chunked = iterable.chunk(2).toSet();
        assertTrue(
                Lists.mutable.with(
                        <name>Bags.mutable.with(<["1", "2"]:(literal.(type))(); separator=", ">),
                        <name>Bags.mutable.with(<["3"]:(literal.(type))(); separator=", ">)).toSet().equals(chunked)
                || Lists.mutable.with(
                        <name>Bags.mutable.with(<["2", "3"]:(literal.(type))(); separator=", ">),
                        <name>Bags.mutable.with(<["1"]:(literal.(type))(); separator=", ">)).toSet().equals(chunked)
                || Lists.mutable.with(
                        <name>Bags.mutable.with(<["1", "3"]:(literal.(type))(); separator=", ">),
                        <name>Bags.mutable.with(<["2"]:(literal.(type))(); separator=", ">)).toSet().equals(chunked));

        assertEquals(
                Lists.mutable.with(
                        <name>Bags.mutable.with(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).toSet(),
                iterable.chunk(3).toSet());
        assertEquals(
                Lists.mutable.with(<name>Bags.mutable.with(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).toSet(),
                iterable.chunk(4).toSet());

        assertThrows(IllegalArgumentException.class, () -> iterable.chunk(0));
        assertThrows(IllegalArgumentException.class, () -> iterable.chunk(-1));
    }
}

>>

keyValue(value) ::= <<
String.valueOf(<value>), <(literal.(type))(value)>
>>

NaNTests() ::= <<
@Override
@Test
public void testEquals_NaN()
{
    // Testing equals() is not applicable for Mutable<name>Collection.
}

>>
