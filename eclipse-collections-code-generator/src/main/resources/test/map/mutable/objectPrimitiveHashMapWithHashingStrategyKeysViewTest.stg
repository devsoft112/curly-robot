import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Object<primitive.name>HashMapWithHashingStrategyKeysViewTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.mutable.primitive;

import org.eclipse.collections.api.LazyIterable;
import org.eclipse.collections.impl.block.factory.HashingStrategies;
import org.eclipse.collections.impl.map.primitive.AbstractObject<name>MapKeysViewTestCase;

/**
 * JUnit test for {@link Object<name>HashMapWithHashingStrategy#keysView()}.
 * This file was automatically generated from template file objectPrimitiveHashMapKeysViewTest.stg.
 */
public class Object<name>HashMapWithHashingStrategyKeysViewTest extends AbstractObject<name>MapKeysViewTestCase
{
    @Override
    public \<T> Object<name>HashMapWithHashingStrategy\<T> newWithKeysValues(T key1, <type> value1, T key2, <type> value2, T key3, <type> value3)
    {
        return Object<name>HashMapWithHashingStrategy.newWithKeysValues(HashingStrategies.nullSafeHashingStrategy(HashingStrategies.\<T>defaultStrategy()), key1, value1, key2, value2, key3, value3);
    }

    @Override
    protected \<T> LazyIterable\<T> newWith(T... elements)
    {
        Object<name>HashMapWithHashingStrategy\<T> map = new Object<name>HashMapWithHashingStrategy\<>(HashingStrategies.nullSafeHashingStrategy(HashingStrategies.\<T>defaultStrategy()));
        for (int i = 0; i \< elements.length; i++)
        {
            map.put(elements[i], <(castIntToNarrowType.(type))("i")>);
        }
        return map.keysView();
    }
}

>>
