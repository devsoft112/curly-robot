import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>BooleanMapTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.mutable.primitive;

import org.eclipse.collections.api.block.function.primitive.BooleanFunction;
import org.eclipse.collections.api.block.function.primitive.BooleanFunction0;
import org.eclipse.collections.api.block.function.primitive.BooleanToBooleanFunction;
import org.eclipse.collections.api.block.function.primitive.<name>ToBooleanFunction;
import org.eclipse.collections.api.iterator.MutableBooleanIterator;
import org.eclipse.collections.impl.factory.Iterables;
import org.eclipse.collections.impl.list.mutable.primitive.BooleanArrayList;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.test.Verify;
import org.eclipse.collections.impl.tuple.primitive.PrimitiveTuples;

import org.junit.Test;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

/**
 * JUnit test for {@link Unmodifiable<name>BooleanMap}.
 * This file was automatically generated from template file unmodifiablePrimitiveBooleanMapTest.stg.
 */
public class Unmodifiable<name>BooleanMapTest extends AbstractMutable<name>BooleanMapTestCase
{
    @Override
    protected Unmodifiable<name>BooleanMap classUnderTest()
    {
        return new Unmodifiable<name>BooleanMap(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("31")>, false, <(literal.(type))("32")>, true));
    }

    @Override
    protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(1).withKeyValue(key1, value1));
    }

    @Override
    protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(2).withKeysValues(key1, value1, key2, value2));
    }

    @Override
    protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(3).withKeysValues(key1, value1, key2, value2, key3, value3));
    }

    @Override
    protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3, <type> key4, boolean value4)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(4).withKeysValues(key1, value1, key2, value2, key3, value3, key4, value4));
    }

    @Override
    protected Unmodifiable<name>BooleanMap getEmptyMap()
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap());
    }

    @Override
    @Test
    public void clear()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().clear());
    }

    @Override
    @Test
    public void removeKey()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().removeKey(<(literal.(type))("5")>));
    }

    @Override
    @Test
    public void removeKeyIfAbsent()
    {
        assertTrue(this.classUnderTest().removeKeyIfAbsent(<(literal.(type))("10")>, true));
    }

    @Test
    public void removeKeyIfAbsentThrowsException()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().removeKeyIfAbsent(<(literal.(type))("0")>, true));
    }

    @Override
    @Test
    public void put()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().put(<(literal.(type))("0")>, true));
    }

    @Override
    @Test
    public void updateValues()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().updateValues((k, v) -> v));
    }

    @Override
    @Test
    public void withKeysValues()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().withKeyValue(<(literal.(type))("1")>, true));
    }

    @Override
    @Test
    public void withoutKey()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().withoutKey(<(literal.(type))("32")>));
    }

    @Override
    @Test
    public void withoutAllKeys()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().withoutAllKeys(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("32")>)));
    }

    @Override
    @Test
    public void withAllKeyValues()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().withAllKeyValues(Iterables.iList(PrimitiveTuples.pair(<(literal.(type))("1")>, true))));
    }

    @Override
    @Test
    public void putDuplicateWithRemovedSlot()
    {
        <type> collision1 = AbstractMutable<name>BooleanMapTestCase.generateCollisions().getFirst();

        Unmodifiable<name>BooleanMap hashMap = this.getEmptyMap();
        assertThrows(UnsupportedOperationException.class, () -> hashMap.put(collision1, true));
    }

    @Override
    @Test
    public void get()
    {
        assertTrue(this.classUnderTest().get(<(literal.(type))("0")>));
        assertFalse(this.classUnderTest().get(<(literal.(type))("31")>));
        assertTrue(this.classUnderTest().get(<(literal.(type))("32")>));

        assertFalse(this.classUnderTest().get(<(literal.(type))("1")>));
        assertFalse(this.classUnderTest().get(<(literal.(type))("33")>));
    }

    @Override
    @Test
    public void getIfAbsent()
    {
        assertTrue(this.classUnderTest().getIfAbsent(<(literal.(type))("0")>, false));
        assertFalse(this.classUnderTest().getIfAbsent(<(literal.(type))("31")>, true));
        assertTrue(this.classUnderTest().getIfAbsent(<(literal.(type))("32")>, false));

        assertFalse(this.classUnderTest().getIfAbsent(<(literal.(type))("1")>, false));
        assertTrue(this.classUnderTest().getIfAbsent(<(literal.(type))("1")>, true));
    }

    @Override
    @Test
    public void getOrThrow()
    {
        assertTrue(this.classUnderTest().getOrThrow(<(literal.(type))("0")>));
        assertFalse(this.classUnderTest().getOrThrow(<(literal.(type))("31")>));
        assertTrue(this.classUnderTest().getOrThrow(<(literal.(type))("32")>));

        assertThrows(IllegalStateException.class, () -> this.classUnderTest().getOrThrow(<(literal.(type))("33")>));
    }

    @Override
    @Test
    public void getIfAbsentPut()
    {
        assertTrue(this.classUnderTest().getIfAbsentPut(<(literal.(type))("0")>, false));
    }

    @Test
    public void getIfAbsentPutThrowsException()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().getIfAbsentPut(<(literal.(type))("10")>, true));
    }

    @Override
    @Test
    public void getIfAbsentPut_Function()
    {
        BooleanFunction0 factory = () -> true;

        assertTrue(this.classUnderTest().getIfAbsentPut(<(literal.(type))("0")>, factory));
    }

    @Test
    public void getIfAbsentPut_FunctionThrowsException()
    {
        BooleanFunction0 factory = () -> true;

        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().getIfAbsentPut(<(literal.(type))("10")>, factory));
    }

    @Override
    @Test
    public void getIfAbsentPutWith()
    {
        BooleanFunction\<String> functionLengthEven = (String string) -> (string.length() & 1) == <(literal.(type))("0")>;

        assertTrue(this.classUnderTest().getIfAbsentPutWith(<(literal.(type))("0")>, functionLengthEven, "12345678"));
    }

    @Test
    public void getIfAbsentPutWithThrowsException()
    {
        BooleanFunction\<String> functionLengthEven = (String string) -> (string.length() & 1) == <(literal.(type))("0")>;

        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().getIfAbsentPutWith(<(literal.(type))("10")>, functionLengthEven, "unused"));
    }

    @Override
    @Test
    public void getIfAbsentPutWithKey()
    {
        <name>ToBooleanFunction keyIsEven = (<type> parameter) -> (<(castRealTypeToInt.(type))("parameter")> & 1) == <(literal.(type))("0")>;

        assertTrue(this.classUnderTest().getIfAbsentPutWithKey(<(literal.(type))("0")>, keyIsEven));
    }

    @Test
    public void getIfAbsentPutWithKeyThrowsException()
    {
        <name>ToBooleanFunction keyIsEven = (<type> parameter) -> (<(castRealTypeToInt.(type))("parameter")> & 1) == <(literal.(type))("0")>;

        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().getIfAbsentPutWithKey(<(literal.(type))("10")>, keyIsEven));
    }

    @Override
    @Test
    public void updateValue()
    {
        BooleanToBooleanFunction flip = (boolean value) -> !value;

        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().updateValue(<(literal.(type))("0")>, false, flip));
    }

    @Override
    @Test
    public void contains()
    {
        assertTrue(this.classUnderTest().contains(true));
        assertTrue(this.classUnderTest().contains(false));
        assertFalse(this.getEmptyMap().contains(false));
    }

    @Override
    @Test
    public void containsKey()
    {
        assertTrue(this.classUnderTest().containsKey(<(literal.(type))("0")>));
        assertTrue(this.classUnderTest().containsKey(<(literal.(type))("31")>));
        assertTrue(this.classUnderTest().containsKey(<(literal.(type))("32")>));
        assertFalse(this.classUnderTest().containsKey(<(literal.(type))("1")>));
        assertFalse(this.classUnderTest().containsKey(<(literal.(type))("5")>));
        assertFalse(this.classUnderTest().containsKey(<(literal.(type))("35")>));
    }

    @Override
    @Test
    public void containsValue()
    {
        assertTrue(this.classUnderTest().containsValue(true));
        assertTrue(this.classUnderTest().containsValue(false));
        assertFalse(this.getEmptyMap().containsValue(false));
    }

    @Override
    @Test
    public void containsAll()
    {
        assertTrue(this.classUnderTest().containsAll(true, false));
        assertTrue(this.classUnderTest().containsAll(true, true));
        assertTrue(this.classUnderTest().containsAll(false, false));
        assertFalse(this.getEmptyMap().containsAll(false, true));
    }

    @Override
    @Test
    public void containsAllIterable()
    {
        assertTrue(this.classUnderTest().containsAll(BooleanArrayList.newListWith(true, false)));
        assertTrue(this.classUnderTest().containsAll(BooleanArrayList.newListWith(true, true)));
        assertTrue(this.classUnderTest().containsAll(BooleanArrayList.newListWith(false, false)));
        assertFalse(this.getEmptyMap().containsAll(BooleanArrayList.newListWith(false, false)));
    }

    @Override
    @Test
    public void size()
    {
        Verify.assertSize(0, this.getEmptyMap());
        Verify.assertSize(1, this.newWithKeysValues(<(literal.(type))("0")>, false));
        Verify.assertSize(1, this.newWithKeysValues(<(literal.(type))("1")>, true));
        Verify.assertSize(3, this.classUnderTest());
    }

    @Override
    @Test
    public void asUnmodifiable()
    {
        super.asUnmodifiable();
        Unmodifiable<name>BooleanMap map1 = this.classUnderTest();
        assertSame(map1, map1.asUnmodifiable());
    }

    @Override
    @Test
    public void booleanIterator_with_remove()
    {
        MutableBooleanIterator iterator = this.classUnderTest().booleanIterator();
        assertTrue(iterator.hasNext());
        assertThrows(UnsupportedOperationException.class, iterator::remove);
    }

    @Override
    @Test
    public void iterator_throws_on_invocation_of_remove_before_next()
    {
        MutableBooleanIterator iterator = this.classUnderTest().booleanIterator();
        assertTrue(iterator.hasNext());
        assertThrows(UnsupportedOperationException.class, iterator::remove);
    }

    @Override
    @Test
    public void iterator_throws_on_consecutive_invocation_of_remove()
    {
        // Not applicable for Unmodifiable*
    }
}

>>
