import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>ObjectMapValuesTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.mutable.primitive;

import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;

import org.eclipse.collections.api.set.MutableSet;
import org.eclipse.collections.impl.bag.mutable.HashBag;
import org.eclipse.collections.impl.list.mutable.FastList;
import org.eclipse.collections.impl.set.mutable.UnifiedSet;
import org.eclipse.collections.impl.test.Verify;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;

/**
 * JUnit test for {@link Unmodifiable<name>ObjectMap#values()}.
 *
 * This file was automatically generated from template file unmodifiablePrimitiveObjectMapValuesTest.stg.
 */
public class Unmodifiable<name>ObjectMapValuesTest
{
    private Unmodifiable<name>ObjectMap\<String> newMapWithKeysValues(<type> key1, String value1, <type> key2, String value2)
    {
        return new Unmodifiable<name>ObjectMap\<>(<name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2));
    }

    private Unmodifiable<name>ObjectMap\<Integer> newMapWithKeysValues(<type> key1, Integer value1, <type> key2, Integer value2, <type> key3, Integer value3)
    {
        return new Unmodifiable<name>ObjectMap\<>(<name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2, key3, value3));
    }

    private Unmodifiable<name>ObjectMap\<Integer> newMapWithKeysValues(<type> key1, Integer value1, <type> key2, Integer value2, <type> key3, Integer value3, <type> key4, Integer value4)
    {
        return new Unmodifiable<name>ObjectMap\<>(<name>ObjectHashMap.newWithKeysValues(key1, value1, key2, value2, key3, value3).withKeyValue(key4, value4));
    }

    @Test
    public void add()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, 3)
                    .values().add(4));
    }

    @Test
    public void addAll()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, 3).values().addAll(FastList.newListWith(4)));
    }

    @Test
    public void contains()
    {
        Unmodifiable<name>ObjectMap\<Integer> map = this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, null);
        Collection\<Integer> values = map.values();
        assertTrue(values.contains(1));
        assertTrue(values.contains(2));
        assertTrue(values.contains(null));
        assertFalse(values.contains(4));
    }

    @Test
    public void containsAll()
    {
        Unmodifiable<name>ObjectMap\<Integer> map = this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, null);
        Collection\<Integer> values = map.values();
        assertTrue(values.containsAll(FastList.newListWith(1, 2)));
        assertTrue(values.containsAll(FastList.newListWith(1, 2, null)));
        assertTrue(values.containsAll(FastList.newListWith(null, null)));
        assertFalse(values.containsAll(FastList.newListWith(1, 4)));
        assertFalse(values.containsAll(FastList.newListWith(5, 4)));
    }

    @Test
    public void isEmpty()
    {
        Unmodifiable<name>ObjectMap\<Integer> map = this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, 3, <(literal.(type))("1")>, null);
        Collection\<Integer> values = map.values();
        assertFalse(values.isEmpty());
        <name>ObjectHashMap\<Integer> map1 = <name>ObjectHashMap.newMap();
        Collection\<Integer> values1 = map1.values();
        assertTrue(values1.isEmpty());
        map1.put(<(literal.(type))("1")>, 1);
        assertFalse(values1.isEmpty());
    }

    @Test
    public void size()
    {
        Unmodifiable<name>ObjectMap\<Integer> map = this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, 3, <(literal.(type))("4")>, null);
        Collection\<Integer> values = map.values();
        Verify.assertSize(4, values);
    }

    @Test
    public void iterator()
    {
        MutableSet\<String> expected = UnifiedSet.newSetWith("zero", "thirtyOne", null);
        MutableSet\<String> actual = UnifiedSet.newSet();

        Iterator\<String> iterator = <name>ObjectHashMap.newWithKeysValues(<(literal.(type))("0")>, "zero", <(literal.(type))("31")>, "thirtyOne", <(literal.(type))("32")>, null).iterator();
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertFalse(iterator.hasNext());

        assertEquals(expected, actual);
        assertThrows(NoSuchElementException.class, iterator::next);
    }

    @Test
    public void values()
    {
        Unmodifiable<name>ObjectMap\<Integer> map = this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, 3);
        Verify.assertContainsAll(map.values(), 1, 2, 3);
    }

    @Test
    public void valuesToArray()
    {
        Unmodifiable<name>ObjectMap\<Integer> map = this.newMapWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, null);
        HashBag\<Integer> expected = HashBag.newBagWith(1, 2, null);
        Collection\<Integer> values = map.values();
        assertEquals(expected, HashBag.newBagWith(values.toArray()));
        assertEquals(expected, HashBag.newBagWith(values.toArray(new Integer[values.size()])));
        assertEquals(expected, HashBag.newBagWith(values.toArray(new Integer[0])));
        expected.add(null);
        assertEquals(expected, HashBag.newBagWith(values.toArray(new Integer[values.size() + 1])));
    }
}

>>
