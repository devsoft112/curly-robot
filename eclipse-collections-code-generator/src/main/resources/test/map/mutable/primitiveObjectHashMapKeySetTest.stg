import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "<primitive.name>ObjectHashMapKeySetTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.mutable.primitive;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.set.primitive.Mutable<name>Set;
import org.eclipse.collections.api.set.MutableSet;
import org.eclipse.collections.impl.factory.Lists;
import org.eclipse.collections.impl.block.factory.primitive.<name>Predicates;
import org.eclipse.collections.impl.factory.primitive.<name>Sets;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.set.mutable.primitive.Abstract<name>SetTestCase;
import org.eclipse.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link <name>ObjectHashMap#keySet()}.
 *
 * This file was automatically generated from template file primitiveObjectHashMapKeySetTest.stg.
 */
public class <name>ObjectHashMapKeySetTest extends Abstract<name>SetTestCase
{
    @Override
    protected Mutable<name>Set classUnderTest()
    {
        return <name>ObjectHashMap.newWithKeysValues(<(literal.(type))("1")>, 1, <(literal.(type))("2")>, 2, <(literal.(type))("3")>, 3).keySet();
    }

    @Override
    protected Mutable<name>Set newWith(<type>... elements)
    {
        <name>ObjectHashMap\<Integer> map = new <name>ObjectHashMap\<>();
        for (int i = 0; i \< elements.length; i++)
        {
            map.put(elements[i], i);
        }
        return map.keySet();
    }

    @Override
    @Test
    public void addAllIterable()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().addAll(new <name>ArrayList()));
    }

    @Override
    @Test
    public void add()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().add(<(literal.(type))("0")>));
    }

    <if(primitive.floatingPoint)><NaNTests()><endif>
    @Override
    @Test
    public void addAllArray()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().addAll(<(literal.(type))("0")>, <(literal.(type))("1")>));
    }

    @Override
    @Test
    public void with()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().with(<(literal.(type))("0")>));
    }

    @Override
    @Test
    public void without()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().without(<(literal.(type))("0")>));
    }

    @Override
    @Test
    public void withAll()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().withAll(new <name>ArrayList()));
    }

    @Override
    @Test
    public void withoutAll()
    {
        Assert.assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().withoutAll(new <name>ArrayList()));
    }

    @Override
    public void testEquals()
    {
        Mutable<name>Set set1 = this.newWith(<(literal.(type))("1")>, <(literal.(type))("31")>, <(literal.(type))("32")>);
        Mutable<name>Set set2 = this.newWith(<(literal.(type))("32")>, <(literal.(type))("31")>, <(literal.(type))("1")>);
        Mutable<name>Set set3 = this.newWith(<(literal.(type))("32")>, <(literal.(type))("32")>, <(literal.(type))("31")>, <(literal.(type))("1")>);
        Mutable<name>Set set4 = this.newWith(<(literal.(type))("32")>, <(literal.(type))("32")>, <(literal.(type))("31")>, <(literal.(type))("1")>, <(literal.(type))("1")>);
        Mutable<name>Set set5 = this.newWith(<(literal.(type))("32")>, <(literal.(type))("1")>);
        Verify.assertEqualsAndHashCode(set1, set2);
        Verify.assertEqualsAndHashCode(set1, set3);
        Verify.assertEqualsAndHashCode(set1, set4);
        Verify.assertEqualsAndHashCode(set2, set3);
        Verify.assertEqualsAndHashCode(set2, set4);
        Assert.assertNotEquals(set1, set5);
    }

    @Override
    @Test
    public void noneSatisfy()
    {
        super.noneSatisfy();
        Assert.assertFalse(this.newWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>).noneSatisfy(<name>Predicates.equal(<(literal.(type))("0")>)));
    }

    @Override
    @Test
    public void sum()
    {
        super.sum();
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.newWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>).sum()<wideDelta.(type)>);
    }

    @Override
    public void testHashCode()
    {
        Mutable<name>Set set1 = this.newWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("31")>, <(literal.(type))("32")>);
        Mutable<name>Set set2 = this.newWith(<(literal.(type))("32")>, <(literal.(type))("31")>, <(literal.(type))("1")>, <(literal.(type))("0")>);
        Assert.assertEquals(set1.hashCode(), set2.hashCode());
        Assert.assertEquals(this.newObjectCollectionWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("31")>, <(literal.(type))("32")>).hashCode(), set1.hashCode());
    }

    @Override
    @Test
    public void chunk()
    {
        <name>Iterable iterable = this.classUnderTest();
        Assert.assertEquals(
                Lists.mutable.with(
                        <name>Sets.mutable.with(<["1"]:(literal.(type))(); separator=", ">),
                        <name>Sets.mutable.with(<["2"]:(literal.(type))(); separator=", ">),
                        <name>Sets.mutable.with(<["3"]:(literal.(type))(); separator=", ">)).toSet(),
                iterable.chunk(1).toSet());

        MutableSet\<<name>Iterable> chunked = iterable.chunk(2).toSet();
        Assert.assertTrue(
                Lists.mutable.with(
                        <name>Sets.mutable.with(<["1", "2"]:(literal.(type))(); separator=", ">),
                        <name>Sets.mutable.with(<["3"]:(literal.(type))(); separator=", ">)).toSet().equals(chunked)
                || Lists.mutable.with(
                        <name>Sets.mutable.with(<["2", "3"]:(literal.(type))(); separator=", ">),
                        <name>Sets.mutable.with(<["1"]:(literal.(type))(); separator=", ">)).toSet().equals(chunked)
                || Lists.mutable.with(
                        <name>Sets.mutable.with(<["1", "3"]:(literal.(type))(); separator=", ">),
                        <name>Sets.mutable.with(<["2"]:(literal.(type))(); separator=", ">)).toSet().equals(chunked));

        Assert.assertEquals(
                Lists.mutable.with(
                        <name>Sets.mutable.with(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).toSet(),
                iterable.chunk(3).toSet());
        Assert.assertEquals(
                Lists.mutable.with(<name>Sets.mutable.with(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).toSet(),
                iterable.chunk(4).toSet());

        Assert.assertThrows(IllegalArgumentException.class, () -> iterable.chunk(0));
        Assert.assertThrows(IllegalArgumentException.class, () -> iterable.chunk(-1));
    }
}

>>

NaNTests() ::= <<
@Override
@Test
public void add_NaN()
{
    Assert.assertThrows(UnsupportedOperationException.class, () -> this.newWith(<wrapperName>.NaN).add(<wrapperName>.NaN));
}

@Override
@Test
public void add_POSITIVE_INFINITY()
{
    Assert.assertThrows(UnsupportedOperationException.class, () ->
            this.newWith(<wrapperName>.POSITIVE_INFINITY).add(<wrapperName>.POSITIVE_INFINITY));
}

@Override
@Test
public void add_NEGATIVE_INFINITY()
{
    Assert.assertThrows(UnsupportedOperationException.class, () ->
            this.newWith(<wrapperName>.NEGATIVE_INFINITY).add(<wrapperName>.NEGATIVE_INFINITY));
}

>>
