import "copyright.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/primitive"

fileName(primitive) ::= "<primitive.name>ObjectMapFactoryTest"

skipBoolean() ::= "true"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName, primitive.charPrimitive)>
>>

body(type, name, wrapperName, charPrimitive) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.primitive;

import org.eclipse.collections.api.map.primitive.Immutable<name>ObjectMap;
import org.eclipse.collections.api.map.primitive.Mutable<name>ObjectMap;
import org.eclipse.collections.impl.factory.Lists;
import org.eclipse.collections.impl.factory.primitive.<name>ObjectMaps;
import org.eclipse.collections.impl.map.mutable.primitive.<name>ObjectHashMap;
import org.junit.Assert;
import org.junit.Test;

/**
 * This file was automatically generated from template file primitiveObjectMapFactoryTest.stg.
 */
public class <name>ObjectMapFactoryTest
{
    @Test
    public void from()
    {
        Iterable\<String> iterable = Lists.mutable.with("1", "2", "3");
        Assert.assertEquals(
            <name>ObjectHashMap.newWithKeysValues(<(literal.(type))("1")>, "1", <(literal.(type))("2")>, "2", <(literal.(type))("3")>, "3"),
            <name>ObjectMaps.mutable.from(iterable, <if(!charPrimitive)><wrapperName>::valueOf<else>each -> each.charAt(0)<endif>, each -> each));
        Assert.assertTrue(<name>ObjectMaps.mutable.from(iterable, <if(!charPrimitive)><wrapperName>::valueOf<else>each -> each.charAt(0)<endif>, each -> each) instanceof Mutable<name>ObjectMap);
        Assert.assertEquals(
                    <name>ObjectHashMap.newWithKeysValues(<(literal.(type))("1")>, "1", <(literal.(type))("2")>, "2", <(literal.(type))("3")>, "3"),
                    <name>ObjectMaps.immutable.from(iterable, <if(!charPrimitive)><wrapperName>::valueOf<else>each -> each.charAt(0)<endif>, each -> each));
        Assert.assertTrue(<name>ObjectMaps.immutable.from(iterable, <if(!charPrimitive)><wrapperName>::valueOf<else>each -> each.charAt(0)<endif>, each -> each) instanceof Immutable<name>ObjectMap);
    }
}

>>
