import "copyrightAndOthers.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/primitive"

fileName(primitive) ::= "AbstractObject<primitive.name>MapTestCase"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.impl.map.primitive;

import java.util.Arrays;
import java.util.NoSuchElementException;

import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.iterator.<name>Iterator;
import org.eclipse.collections.api.list.primitive.Mutable<name>List;
import org.eclipse.collections.api.map.primitive.ImmutableObject<name>Map;
import org.eclipse.collections.api.set.primitive.Mutable<name>Set;
import org.eclipse.collections.api.map.primitive.MutableObject<name>Map;
import org.eclipse.collections.api.map.primitive.Object<name>Map;
import org.eclipse.collections.impl.bag.mutable.primitive.<name>HashBag;
import org.eclipse.collections.impl.factory.primitive.<name>Lists;
import org.eclipse.collections.impl.factory.primitive.Object<name>Maps;
import org.eclipse.collections.impl.list.mutable.FastList;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.map.mutable.UnifiedMap;
import org.eclipse.collections.impl.map.mutable.primitive.Object<name>HashMap;
import org.eclipse.collections.impl.set.mutable.UnifiedSet;
import org.eclipse.collections.impl.set.mutable.primitive.<name>HashSet;
import org.eclipse.collections.impl.test.Verify;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertArrayEquals;

/**
 * This file was automatically generated from template file abstractObjectPrimitiveMapTestCase.stg.
 */
public abstract class AbstractObject<name>MapTestCase
{
    private final Object<name>Map\<String> map = this.classUnderTest();

    protected abstract Object<name>Map\<String> classUnderTest();

    protected abstract \<T> Object<name>Map\<T> newWithKeysValues(T key1, <type> value1);

    protected abstract \<T> Object<name>Map\<T> newWithKeysValues(T key1, <type> value1, T key2, <type> value2);

    protected abstract \<T> Object<name>Map\<T> newWithKeysValues(T key1, <type> value1, T key2, <type> value2, T key3, <type> value3);

    protected abstract \<T> Object<name>Map\<T> newWithKeysValues(T key1, <type> value1, T key2, <type> value2, T key3, <type> value3, T key4, <type> value4);

    protected abstract \<T> Object<name>Map\<T> getEmptyMap();

    @Test
    public void keySet()
    {
        Verify.assertEmpty(this.getEmptyMap().keySet());
        assertEquals(UnifiedSet.newSetWith("0"), this.newWithKeysValues("0", <(literal.(type))("0")>).keySet());
        assertEquals(UnifiedSet.newSetWith("0", "1", "2"),
                this.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>, "2", <(literal.(type))("2")>).keySet());
    }

    @Test
    public void values()
    {
        Verify.assertEmpty(this.getEmptyMap().values());

        Object<name>Map\<String> map = this.newWithKeysValues("0", <(literal.(type))("0")>);
        Verify.assertSize(1, map.values());
        assertTrue(map.values().contains(<(literal.(type))("0")>));

        Object<name>Map\<String> map1 = this.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>, "2", <(literal.(type))("2")>);
        Verify.assertSize(3, map1.values());
        assertTrue(map1.values().contains(<(literal.(type))("0")>));
        assertTrue(map1.values().contains(<(literal.(type))("1")>));
        assertTrue(map1.values().contains(<(literal.(type))("2")>));
    }

    @Test
    public void get()
    {
        assertEquals(<(literal.(type))("0")>, this.map.get("0")<delta.(type)>);
        assertEquals(<(literal.(type))("1")>, this.map.get("1")<delta.(type)>);
        assertEquals(<(literal.(type))("2")>, this.map.get("2")<delta.(type)>);
    }

    @Test
    public void getOrThrow()
    {
        assertEquals(<(literal.(type))("0")>, this.map.getOrThrow("0")<delta.(type)>);
        assertEquals(<(literal.(type))("1")>, this.map.getOrThrow("1")<delta.(type)>);
        assertEquals(<(literal.(type))("2")>, this.map.getOrThrow("2")<delta.(type)>);
        assertThrows(IllegalStateException.class, () -> this.map.getOrThrow("5"));
        assertThrows(IllegalStateException.class, () -> this.map.getOrThrow(null));
    }

    @Test
    public void containsKey()
    {
        assertTrue(this.map.containsKey("0"));
        assertTrue(this.map.containsKey("1"));
        assertTrue(this.map.containsKey("2"));
        assertFalse(this.map.containsKey("3"));
        assertFalse(this.map.containsKey(null));
    }

    @Test
    public void containsValue()
    {
        assertTrue(this.map.containsValue(<(literal.(type))("0")>));
        assertTrue(this.map.containsValue(<(literal.(type))("1")>));
        assertTrue(this.map.containsValue(<(literal.(type))("2")>));
    }

    @Test
    public void size()
    {
        Verify.assertSize(0, this.getEmptyMap());
        Verify.assertSize(1, this.newWithKeysValues(0, <(literal.(type))("0")>));
        Verify.assertSize(1, this.newWithKeysValues(1, <(literal.(type))("1")>));
        Verify.assertSize(1, this.newWithKeysValues(null, <(literal.(type))("2")>));
        Verify.assertSize(2, this.newWithKeysValues(1, <(literal.(type))("1")>, 5, <(literal.(type))("5")>));
        Verify.assertSize(2, this.newWithKeysValues(0, <(literal.(type))("0")>, 5, <(literal.(type))("5")>));
        Verify.assertSize(3, this.newWithKeysValues(1, <(literal.(type))("1")>, 0, <(literal.(type))("0")>, 5, <(literal.(type))("5")>));
        Verify.assertSize(2, this.newWithKeysValues(6, <(literal.(type))("6")>, 5, <(literal.(type))("5")>));
    }

    @Test
    public void isEmpty()
    {
        Verify.assertEmpty(this.getEmptyMap());
        assertFalse(this.map.isEmpty());
        assertFalse(this.newWithKeysValues(null, <(literal.(type))("1")>).isEmpty());
        assertFalse(this.newWithKeysValues(1, <(literal.(type))("1")>).isEmpty());
        assertFalse(this.newWithKeysValues(0, <(literal.(type))("0")>).isEmpty());
        assertFalse(this.newWithKeysValues(50, <(literal.(type))("50")>).isEmpty());
    }

    @Test
    public void notEmpty()
    {
        assertFalse(this.getEmptyMap().notEmpty());
        assertTrue(this.map.notEmpty());
        assertTrue(this.newWithKeysValues(1, <(literal.(type))("1")>).notEmpty());
        assertTrue(this.newWithKeysValues(null, <(literal.(type))("1")>).notEmpty());
        assertTrue(this.newWithKeysValues(0, <(literal.(type))("0")>).notEmpty());
        assertTrue(this.newWithKeysValues(50, <(literal.(type))("50")>).notEmpty());
    }

    @Test
    public void asLazy()
    {
        Verify.assertSize(this.map.toList().size(), this.map.asLazy().toList());
        assertTrue(this.map.asLazy().toList().containsAll(this.map.toList()));
    }

    @Test
    public void getIfAbsent()
    {
        assertEquals(<(literal.(type))("0")>, this.map.getIfAbsent("0", <(literal.(type))("1")>)<delta.(type)>);
        assertEquals(<(literal.(type))("1")>, this.map.getIfAbsent("1", <(literal.(type))("2")>)<delta.(type)>);
        assertEquals(<(literal.(type))("2")>, this.map.getIfAbsent("2", <(literal.(type))("3")>)<delta.(type)>);
        assertEquals(<(literal.(type))("1")>, this.map.getIfAbsent("5", <(literal.(type))("1")>)<delta.(type)>);
        assertEquals(<(literal.(type))("0")>, this.map.getIfAbsent("5", <(literal.(type))("0")>)<delta.(type)>);

        assertEquals(<(literal.(type))("1")>, this.map.getIfAbsent(null, <(literal.(type))("1")>)<delta.(type)>);
        assertEquals(<(literal.(type))("0")>, this.map.getIfAbsent(null, <(literal.(type))("0")>)<delta.(type)>);
    }

    @Test
    public void testEquals()
    {
        Object<name>Map\<Integer> map1 = this.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>, null, <(literal.(type))("2")>);
        Object<name>Map\<Integer> map2 = this.newWithKeysValues(null, <(literal.(type))("2")>, 0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>);
        Object<name>Map\<Integer> map3 = this.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("2")>, null, <(literal.(type))("2")>);
        Object<name>Map\<Integer> map5 = this.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>, null, <(literal.(type))("3")>);
        Object<name>Map\<Integer> map7 = this.newWithKeysValues(null, <(literal.(type))("2")>, 1, <(literal.(type))("1")>);

        Verify.assertEqualsAndHashCode(map1, map2);
        Verify.assertPostSerializedEqualsAndHashCode(map1);
        assertNotEquals(map1, map3);
        assertNotEquals(map1, map5);
        assertNotEquals(map1, map7);

        assertEquals(map1, Object<name>Maps.mutable.ofAll(map1));
        assertEquals(map1, Object<name>Maps.immutable.ofAll(map1));
    }

    @Test
    public void testHashCode()
    {
        assertEquals(
                UnifiedMap.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>).hashCode(),
                this.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>).hashCode());
        assertEquals(
                UnifiedMap.newWithKeysValues(50, <(literal.(type))("0")>, null, <(literal.(type))("1")>).hashCode(),
                this.newWithKeysValues(50, <(literal.(type))("0")>, null, <(literal.(type))("1")>).hashCode());
        assertEquals(UnifiedMap.newMap().hashCode(), this.getEmptyMap().hashCode());
    }

    @Test
    public void testToString()
    {
        assertEquals("{}", this.\<Integer>getEmptyMap().toString());
        assertEquals("{0=<(toStringLiteral.(type))("0")>}", this.newWithKeysValues(0, <(literal.(type))("0")>).toString());

        Object<name>Map\<Integer> map1 = this.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>);
        assertTrue(
                map1.toString(),
                "{0=<(toStringLiteral.(type))("0")>, 1=<(toStringLiteral.(type))("1")>}".equals(map1.toString())
                        || "{1=<(toStringLiteral.(type))("1")>, 0=<(toStringLiteral.(type))("0")>}".equals(map1.toString()));

        Object<name>Map\<Integer> map2 = this.newWithKeysValues(1, <(literal.(type))("1")>, null, <(literal.(type))("0")>);
        assertTrue(
                map2.toString(),
                "{1=<(toStringLiteral.(type))("1")>, null=<(toStringLiteral.(type))("0")>}".equals(map2.toString())
                        || "{null=<(toStringLiteral.(type))("0")>, 1=<(toStringLiteral.(type))("1")>}".equals(map2.toString()));
    }

    @Test
    public void <type>Iterator()
    {
        Mutable<name>Set expected = <name>HashSet.newSetWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>);
        Mutable<name>Set actual = <name>HashSet.newSetWith();

        <name>Iterator iterator = this.map.<type>Iterator();
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertFalse(iterator.hasNext());

        assertEquals(expected, actual);
        assertThrows(NoSuchElementException.class, iterator::next);
        assertThrows(NoSuchElementException.class, () ->
        {
            this.getEmptyMap().<type>Iterator().next();
        });
    }

    @Test
    public void forEach()
    {
        Object<name>Map\<Integer> map01 = this.newWithKeysValues(0, <(literal.(type))("1")>, 1, <(literal.(type))("2")>);
        <type>[] sum01 = new <type>[1];
        map01.forEach(each ->
        {
            sum01[0] += each;
        });
        assertEquals(<(literal.(type))("3")>, sum01[0]<delta.(type)>);

        Object<name>Map\<Integer> map = this.newWithKeysValues(3, <(literal.(type))("4")>, 4, <(literal.(type))("5")>);
        <type>[] sum = new <type>[1];
        map.forEach(each ->
        {
            sum[0] += each;
        });
        assertEquals(<(literal.(type))("9")>, sum[0]<delta.(type)>);

        Object<name>Map\<Integer> map1 = this.newWithKeysValues(3, <(literal.(type))("4")>, null, <(literal.(type))("5")>);
        <type>[] sum1 = new <type>[1];
        map1.forEach(each ->
        {
            sum1[0] += each;
        });
        assertEquals(<(literal.(type))("9")>, sum1[0]<delta.(type)>);
    }

    @Test
    public void forEachValue()
    {
        Object<name>Map\<Integer> map01 = this.newWithKeysValues(0, <(literal.(type))("1")>, 1, <(literal.(type))("2")>);
        <type>[] sum01 = new <type>[1];
        map01.forEachValue((<type> each) -> sum01[0] += each);
        assertEquals(<(literal.(type))("3")>, sum01[0]<delta.(type)>);

        Object<name>Map\<Integer> map = this.newWithKeysValues(3, <(literal.(type))("4")>, null, <(literal.(type))("5")>);
        <type>[] sum = new <type>[1];
        map.forEachValue((<type> each) -> sum[0] += each);
        assertEquals(<(literal.(type))("9")>, sum[0]<delta.(type)>);
    }

    @Test
    public void forEachKey()
    {
        Object<name>Map\<Integer> map01 = this.newWithKeysValues(0, <(literal.(type))("1")>, 1, <(literal.(type))("2")>);
        int[] sum01 = new int[1];
        map01.forEachKey((Integer each) -> sum01[0] += each);
        assertEquals(1, sum01[0]);

        Object<name>Map\<Integer> map = this.newWithKeysValues(3, <(literal.(type))("4")>, null, <(literal.(type))("5")>);
        String[] sum = new String[1];
        sum[0] = "";
        map.forEachKey(each -> sum[0] += String.valueOf(each));
        assertTrue("3null".equals(sum[0]) || "null3".equals(sum[0]));
    }

    @Test
    public void forEachKeyValue()
    {
        Object<name>Map\<Integer> map01 = this.newWithKeysValues(0, <(literal.(type))("1")>, 1, <(literal.(type))("2")>);
        int[] sumKey01 = new int[1];
        <type>[] sumValue01 = new <type>[1];
        map01.forEachKeyValue((Integer eachKey, <type> eachValue) ->
        {
            sumKey01[0] += eachKey;
            sumValue01[0] += eachValue;
        });
        assertEquals(1, sumKey01[0]);
        assertEquals(<(literal.(type))("3")>, sumValue01[0]<delta.(type)>);

        Object<name>Map\<Integer> map = this.newWithKeysValues(3, <(literal.(type))("4")>, null, <(literal.(type))("5")>);
        String[] sumKey = new String[1];
        sumKey[0] = "";
        <type>[] sumValue = new <type>[1];
        map.forEachKeyValue((Integer eachKey, <type> eachValue) ->
        {
            sumKey[0] += String.valueOf(eachKey);
            sumValue[0] += eachValue;
        });
        assertTrue("3null".equals(sumKey[0]) || "null3".equals(sumKey[0]));
        assertEquals(<(literal.(type))("9")>, sumValue[0]<delta.(type)>);
    }

    @Test
    public void injectIntoKeyValue()
    {
        Object<name>Map\<String> map0 = this.newWithKeysValues("2", <(literal.(type))("3")>, "4", <(literal.(type))("5")>);

        String result0 = map0.injectIntoKeyValue(new String("1"), (result, eachKey, eachValue) -> result + eachKey + String.valueOf(eachValue));
        assertTrue(result0, "12<(toStringLiteral.(type))("3")>4<(toStringLiteral.(type))("5")>".equals(result0) || "14<(toStringLiteral.(type))("5")>2<(toStringLiteral.(type))("3")>".equals(result0));

        Object<name>Map copy = map0.injectIntoKeyValue(Object<name>Maps.mutable.empty(), MutableObject<name>Map::withKeyValue);
        assertEquals(map0, copy);
    }

    @Test
    public void makeString()
    {
        assertEquals("", this.\<String>getEmptyMap().makeString());
        assertEquals("<(toStringLiteral.(type))("0")>", this.newWithKeysValues(0, <(literal.(type))("0")>).makeString());
        assertEquals("<(toStringLiteral.(type))("1")>", this.newWithKeysValues(1, <(literal.(type))("1")>).makeString());
        assertEquals("<(toStringLiteral.(type))("5")>", this.newWithKeysValues(null, <(literal.(type))("5")>).makeString());

        Object<name>Map\<Integer> map2 = this.newWithKeysValues(1, <(literal.(type))("1")>, 32, <(literal.(type))("32")>);
        assertTrue(
                map2.makeString("[", "/", "]"),
                "[<(toStringLiteral.(type))("1")>/<(toStringLiteral.(type))("32")>]".equals(map2.makeString("[", "/", "]"))
                        || "[<(toStringLiteral.(type))("32")>/<(toStringLiteral.(type))("1")>]".equals(map2.makeString("[", "/", "]")));

        assertTrue(
                map2.makeString("/"),
                "<(toStringLiteral.(type))("1")>/<(toStringLiteral.(type))("32")>".equals(map2.makeString("/"))
                        || "<(toStringLiteral.(type))("32")>/<(toStringLiteral.(type))("1")>".equals(map2.makeString("/")));
    }

    @Test
    public void appendString()
    {
        Appendable appendable = new StringBuilder();
        this.getEmptyMap().appendString(appendable);
        assertEquals("", appendable.toString());

        Appendable appendable0 = new StringBuilder();
        this.newWithKeysValues(0, <(literal.(type))("0")>).appendString(appendable0);
        assertEquals("<(toStringLiteral.(type))("0")>", appendable0.toString());

        Appendable appendable1 = new StringBuilder();
        this.newWithKeysValues(1, <(literal.(type))("1")>).appendString(appendable1);
        assertEquals("<(toStringLiteral.(type))("1")>", appendable1.toString());

        Appendable appendable2 = new StringBuilder();
        this.newWithKeysValues(null, <(literal.(type))("5")>).appendString(appendable2);
        assertEquals("<(toStringLiteral.(type))("5")>", appendable2.toString());

        Appendable appendable3 = new StringBuilder();
        Object<name>Map\<Integer> map1 = this.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>);
        map1.appendString(appendable3);
        assertTrue(
                appendable3.toString(),
                "<(toStringLiteral.(type))("0")>, <(toStringLiteral.(type))("1")>".equals(appendable3.toString())
                        || "<(toStringLiteral.(type))("1")>, <(toStringLiteral.(type))("0")>".equals(appendable3.toString()));

        Appendable appendable4 = new StringBuilder();
        map1.appendString(appendable4, "/");
        assertTrue(
                appendable4.toString(),
                "<(toStringLiteral.(type))("0")>/<(toStringLiteral.(type))("1")>".equals(appendable4.toString())
                        || "<(toStringLiteral.(type))("1")>/<(toStringLiteral.(type))("0")>".equals(appendable4.toString()));

        Appendable appendable5 = new StringBuilder();
        map1.appendString(appendable5, "[", "/", "]");
        assertTrue(
                appendable5.toString(),
                "[<(toStringLiteral.(type))("0")>/<(toStringLiteral.(type))("1")>]".equals(appendable5.toString())
                        || "[<(toStringLiteral.(type))("1")>/<(toStringLiteral.(type))("0")>]".equals(appendable5.toString()));
    }

    @Test
    public void select()
    {
        assertEquals(this.map, this.map.select((String object, <type> value) -> ((Integer.parseInt(object) + value) % 2) == 0));

        assertEquals(Object<name>HashMap.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>),
                this.map.select((String object, <type> value) -> <(lessThan.(type))("Integer.parseInt(object) + value", {<(literal.(type))("4")>})>));

        assertEquals(this.getEmptyMap(), this.map.select((String object, <type> value) -> ((Integer.parseInt(object) + value) % 2) != 0));

        assertEquals(<name>HashBag.newBagWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>),
                this.map.select(value -> <(lessThan.(type))("value", {<(literal.(type))("3")>})>).toBag());

        assertEquals(<name>HashBag.newBagWith(<(literal.(type))("0")>, <(literal.(type))("1")>), this.map.select(value -> <(lessThan.(type))("value", {<(literal.(type))("2")>})>).toBag());

        assertEquals(new <name>HashBag(), this.map.select(value -> value > <(literal.(type))("2")>).toBag());
    }

    @Test
    public void reject()
    {
        assertEquals(this.getEmptyMap(), this.map.reject((String object, <type> value) -> ((Integer.parseInt(object) + value) % 2) == 0));

        assertEquals(Object<name>HashMap.newWithKeysValues("2", <(literal.(type))("2")>),
                this.map.reject((String object, <type> value) -> <(lessThan.(type))("Integer.parseInt(object) + value", {<(literal.(type))("4")>})>));

        assertEquals(this.map, this.map.reject((String object, <type> value) -> ((Integer.parseInt(object) + value) % 2) != 0));

        assertEquals(new <name>HashBag(), this.map.reject(value -> <(lessThan.(type))("value", {<(literal.(type))("3")>})>).toBag());

        assertEquals(<name>HashBag.newBagWith(<(literal.(type))("2")>), this.map.reject(value -> <(lessThan.(type))("value", {<(literal.(type))("2")>})>).toBag());

        assertEquals(<name>HashBag.newBagWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>),
                this.map.reject(value -> value > <(literal.(type))("2")>).toBag());
    }

    @Test
    public void tap()
    {
        Mutable<name>List tapResult = <name>Lists.mutable.empty();
        assertSame(this.map, this.map.tap(tapResult::add));
        assertEquals(this.map.toList(), tapResult);
    }

    @Test
    public void count()
    {
        assertEquals(3L, this.map.count(value -> <(lessThan.(type))("value", {<(literal.(type))("3")>})>));

        assertEquals(2L, this.map.count(value -> <(lessThan.(type))("value", {<(literal.(type))("2")>})>));

        assertEquals(0L, this.map.count(value -> value > <(literal.(type))("2")>));
    }

    @Test
    public void anySatisfy()
    {
        assertTrue(this.map.anySatisfy(value -> <(lessThan.(type))("value", {<(literal.(type))("3")>})>));

        assertTrue(this.map.anySatisfy(value -> <(lessThan.(type))("value", {<(literal.(type))("2")>})>));

        assertFalse(this.map.anySatisfy(value -> value > <(literal.(type))("2")>));
    }

    @Test
    public void allSatisfy()
    {
        assertTrue(this.map.allSatisfy(value -> <(lessThan.(type))("value", {<(literal.(type))("3")>})>));

        assertFalse(this.map.allSatisfy(value -> <(lessThan.(type))("value", {<(literal.(type))("2")>})>));

        assertFalse(this.map.allSatisfy(value -> value > <(literal.(type))("2")>));
    }

    @Test
    public void noneSatisfy()
    {
        assertTrue(this.map.noneSatisfy(value -> <(lessThan.(type))("value", {<(literal.(type))("0")>})>));

        assertFalse(this.map.noneSatisfy(value -> <(lessThan.(type))("value", {<(literal.(type))("2")>})>));
    }

    @Test
    public void detectIfNone()
    {
        <type> detect = this.map.detectIfNone(value -> <(lessThan.(type))("value", {<(literal.(type))("3")>})>, <(literal.(type))("5")>);
        assertTrue(<(equals.(type))("detect", "0")> || <(equals.(type))("detect", "1")> || <(equals.(type))("detect", "2")>);

        <type> detect1 = this.map.detectIfNone(value -> <(lessThan.(type))("value", {<(literal.(type))("2")>})>, <(literal.(type))("5")>);
        assertTrue(<(equals.(type))("detect1", "0")> || <(equals.(type))("detect1", "1")>);

        assertEquals(<(literal.(type))("5")>, this.map.detectIfNone(value -> value > <(literal.(type))("2")>, <(literal.(type))("5")>)<delta.(type)>);
    }

    @Test
    public void collect()
    {
        <name>ToObjectFunction\<String> toString = String::valueOf;
        Object<name>Map\<Integer> map1 = this.newWithKeysValues(0, <(literal.(type))("0")>, 1, <(literal.(type))("1")>);
        assertTrue(map1.collect(toString).toString(), FastList.newListWith("<(toStringLiteral.(type))("1")>", "<(toStringLiteral.(type))("0")>").equals(map1.collect(toString))
                || FastList.newListWith("<(toStringLiteral.(type))("0")>", "<(toStringLiteral.(type))("1")>").equals(map1.collect(toString)));
    }

    @Test
    public void sum()
    {
        assertEquals(<(wideLiteral.(type))("3")>, this.map.sum()<wideDelta.(type)>);
    }

    @Test
    public void max()
    {
        assertEquals(<(literal.(type))("2")>, this.map.max()<delta.(type)>);
        assertEquals(<(literal.(type))("3")>, this.newWithKeysValues(null, <(literal.(type))("3")>, 0, <(literal.(type))("0")>, 2, <(literal.(type))("2")>).max()<delta.(type)>);
    }

    @Test
    public void max_throws_emptyList()
    {
        assertThrows(NoSuchElementException.class, () -> this.\<Integer>getEmptyMap().max());
    }

    @Test
    public void min()
    {
        assertEquals(<(literal.(type))("0")>, this.map.min()<delta.(type)>);
        assertEquals(<(literal.(type))("0")>, this.newWithKeysValues(null, <(literal.(type))("0")>, 5, <(literal.(type))("5")>, 1, <(literal.(type))("1")>).min()<delta.(type)>);
    }

    @Test
    public void min_throws_emptyList()
    {
        assertThrows(NoSuchElementException.class, () -> this.\<Integer>getEmptyMap().min());
    }

    @Test
    public void maxIfEmpty()
    {
        assertEquals(<(literal.(type))("2")>, this.map.maxIfEmpty(<(literal.(type))("5")>)<delta.(type)>);
        assertEquals(<(literal.(type))("3")>, this.newWithKeysValues(null, <(literal.(type))("3")>, 0, <(literal.(type))("0")>, 2, <(literal.(type))("2")>).maxIfEmpty(<(literal.(type))("5")>)<delta.(type)>);
        assertEquals(<(literal.(type))("9")>, this.getEmptyMap().maxIfEmpty(<(literal.(type))("9")>)<delta.(type)>);
    }

    @Test
    public void minIfEmpty()
    {
        assertEquals(<(literal.(type))("0")>, this.map.minIfEmpty(<(literal.(type))("6")>)<delta.(type)>);
        assertEquals(<(literal.(type))("0")>, this.newWithKeysValues(null, <(literal.(type))("0")>, 5, <(literal.(type))("5")>, 1, <(literal.(type))("1")>).minIfEmpty(<(literal.(type))("6")>)<delta.(type)>);
        assertEquals(<(literal.(type))("5")>, this.getEmptyMap().minIfEmpty(<(literal.(type))("5")>)<delta.(type)>);
    }

    @Test
    public void average()
    {
        assertEquals(1.0, this.map.average(), 0.0);
    }

    @Test
    public void averageThrowsOnEmpty()
    {
        assertThrows(ArithmeticException.class, () -> this.getEmptyMap().average());
    }

    @Test
    public void median()
    {
        assertEquals(1.0, this.map.median(), 0.0);
        assertEquals(1.5, this.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>, "2", <(literal.(type))("2")>, "3", <(literal.(type))("3")>).median(), 0.0);
    }

    @Test
    public void medianThrowsOnEmpty()
    {
        assertThrows(ArithmeticException.class, () -> this.getEmptyMap().median());
    }

    @Test
    public void toArray()
    {
        assertTrue(Arrays.equals(new <type>[]{<(literal.(type))("0")>, <(literal.(type))("1")>}, this.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>).toArray())
                || Arrays.equals(new <type>[]{<(literal.(type))("1")>, <(literal.(type))("0")>}, this.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>).toArray()));
        assertArrayEquals(new <type>[]{}, this.getEmptyMap().toArray()<delta.(type)>);
    }

    @Test
    public void toSortedArray()
    {
        assertArrayEquals(new <type>[]{<(literal.(type))("0")>, <(literal.(type))("2")>, <(literal.(type))("9")>}, this.newWithKeysValues("9", <(literal.(type))("9")>, "0", <(literal.(type))("0")>, "2", <(literal.(type))("2")>).toSortedArray()<delta.(type)>);
        assertArrayEquals(new <type>[]{}, this.getEmptyMap().toSortedArray()<delta.(type)>);
    }

    @Test
    public void contains()
    {
        assertTrue(this.map.contains(<(literal.(type))("0")>));
        assertTrue(this.map.contains(<(literal.(type))("1")>));
        assertTrue(this.map.contains(<(literal.(type))("2")>));
    }

    @Test
    public void containsAll()
    {
        assertTrue(this.map.containsAll(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>));
        assertFalse(this.map.containsAll(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("5")>));
        assertTrue(this.map.containsAll());
    }

    @Test
    public void containsAll_Iterable()
    {
        assertTrue(this.map.containsAll(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>)));
        assertFalse(this.map.containsAll(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("5")>)));
        assertTrue(this.map.containsAll(new <name>ArrayList()));
    }

    @Test
    public void toList()
    {
        assertTrue(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("1")>).equals(this.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>).toList())
                || <name>ArrayList.newListWith(<(literal.(type))("1")>, <(literal.(type))("0")>).equals(this.newWithKeysValues("0", <(literal.(type))("0")>, "1", <(literal.(type))("1")>).toList()));
        assertEquals(<name>ArrayList.newListWith(), this.getEmptyMap().toList());
    }

    @Test
    public void toSortedList()
    {
        assertEquals(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("2")>, <(literal.(type))("9")>), this.newWithKeysValues("9", <(literal.(type))("9")>, "0", <(literal.(type))("0")>, "2", <(literal.(type))("2")>).toSortedList());
        assertEquals(<name>ArrayList.newListWith(), this.getEmptyMap().toSortedList());
    }

    @Test
    public void toSet()
    {
        assertEquals(<name>HashSet.newSetWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>), this.map.toSet());
        assertEquals(<name>HashSet.newSetWith(), this.getEmptyMap().toSet());
    }

    @Test
    public void toBag()
    {
        assertEquals(<name>HashBag.newBagWith(<(literal.(type))("0")>, <(literal.(type))("1")>, <(literal.(type))("2")>), this.map.toBag());
        assertEquals(<name>HashBag.newBagWith(), this.getEmptyMap().toBag());
    }

    @Test
    public void toImmutable()
    {
        assertEquals(this.classUnderTest(), this.classUnderTest().toImmutable());
        Verify.assertInstanceOf(ImmutableObject<name>Map.class, this.classUnderTest().toImmutable());
    }
}

>>
