import "copyrightAndOthers.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

hasTwoPrimitives() ::= "true"

skipBoolean() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/map/primitive"

fileName(primitive1, primitive2, sameTwoPrimitives) ::= "Abstract<primitive1.name><primitive2.name>MapTestCase"

class(primitive1, primitive2, sameTwoPrimitives) ::= <<
<body(primitive1.type, primitive2.type, primitive1.name, primitive2.name)>
>>

body(type1, type2, name1, name2) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.impl.map.primitive;

import java.util.Arrays;
import java.util.NoSuchElementException;

import org.eclipse.collections.api.<name2>Iterable;
import org.eclipse.collections.api.Lazy<name2>Iterable;
import org.eclipse.collections.api.bag.MutableBag;
import org.eclipse.collections.api.block.function.primitive.<name2>ToObjectFunction;
import org.eclipse.collections.api.factory.primitive.<name1><name2>Maps;
import org.eclipse.collections.api.iterator.<name2>Iterator;
import org.eclipse.collections.api.map.primitive.<name1><name2>Map;
import org.eclipse.collections.api.map.primitive.Immutable<name1><name2>Map;
import org.eclipse.collections.api.map.primitive.Mutable<name1><name2>Map;
import org.eclipse.collections.api.set.primitive.Mutable<name2>Set;
import org.eclipse.collections.api.tuple.primitive.<name1><name2>Pair;
import org.eclipse.collections.impl.bag.mutable.primitive.<name2>HashBag;
import org.eclipse.collections.impl.block.factory.primitive.<name2>Predicates;
import org.eclipse.collections.impl.factory.Bags;
import org.eclipse.collections.impl.factory.Lists;
import org.eclipse.collections.impl.factory.primitive.<name2>Bags;
import org.eclipse.collections.impl.list.mutable.primitive.<name1>ArrayList;
<if(!sameTwoPrimitives)>import org.eclipse.collections.impl.list.mutable.primitive.<name2>ArrayList;<endif>
import org.eclipse.collections.impl.map.mutable.UnifiedMap;
import org.eclipse.collections.impl.map.mutable.primitive.<name1><name2>HashMap;
import org.eclipse.collections.impl.set.mutable.primitive.<name2>HashSet;
<if(!sameTwoPrimitives)>import org.eclipse.collections.impl.set.mutable.primitive.<name1>HashSet;<endif>
import org.eclipse.collections.impl.test.Verify;
import org.eclipse.collections.impl.tuple.primitive.PrimitiveTuples;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;

/**
 * This file was automatically generated from template file abstractPrimitivePrimitiveMapTestCase.stg.
 */
public abstract class Abstract<name1><name2>MapTestCase
{
    protected final <name1><name2>Map map = this.classUnderTest();

    protected abstract <name1><name2>Map classUnderTest();

    protected abstract <name1><name2>Map newWithKeysValues(<type1> key1, <type2> value1);

    protected abstract <name1><name2>Map newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2);

    protected abstract <name1><name2>Map newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2, <type1> key3, <type2> value3);

    protected abstract <name1><name2>Map newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2, <type1> key3, <type2> value3, <type1> key4, <type2> value4);

    protected abstract <name1><name2>Map getEmptyMap();

    @Test
    public void keySet()
    {
        Verify.assertEmpty(this.getEmptyMap().keySet());
        assertEquals(<name1>HashSet.newSetWith(<(literal.(type1))("0")>), this.newWithKeysValues(<["0"]:keyValue(); separator=", ">).keySet());
        assertEquals(<name1>HashSet.newSetWith(<["0", "31", "32"]:(literal.(type1))(); separator=", ">),
                this.newWithKeysValues(<["0", "31", "32"]:keyValue(); separator=", ">).keySet());
    }

    @Test
    public void values()
    {
        Verify.assertEmpty(this.getEmptyMap().values());

        <name1><name2>Map map = this.newWithKeysValues(<["0"]:keyValue(); separator=", ">);
        Verify.assertSize(1, map.values());
        assertTrue(map.values().contains(<(literal.(type2))("0")>));

        <name1><name2>Map map1 = this.newWithKeysValues(<["0", "31", "32"]:keyValue(); separator=", ">);
        Verify.assertSize(3, map1.values());
        assertTrue(map1.values().contains(<(literal.(type2))("0")>));
        assertTrue(map1.values().contains(<(literal.(type2))("31")>));
        assertTrue(map1.values().contains(<(literal.(type2))("32")>));
    }

    @Test
    public void get()
    {
        assertEquals(<(wideLiteral.(type2))("0")>, this.map.get(<(literal.(type1))("0")>)<wideDelta.(type2)>);
        assertEquals(<(wideLiteral.(type2))("31")>, this.map.get(<(literal.(type1))("31")>)<wideDelta.(type2)>);
        assertEquals(<(wideLiteral.(type2))("32")>, this.map.get(<(literal.(type1))("32")>)<wideDelta.(type2)>);

        assertEquals(<(wideLiteral.(type2))("0")>, this.map.get(<(literal.(type1))("1")>)<wideDelta.(type2)>);
        assertEquals(<(wideLiteral.(type2))("0")>, this.map.get(<(literal.(type1))("33")>)<wideDelta.(type2)>);
    }

    @Test
    public void getIfAbsent()
    {
        assertEquals(<(wideLiteral.(type2))("0")>, this.map.getIfAbsent(<(literal.(type1))("0")>, <(literal.(type2))("5")>)<wideDelta.(type2)>);
        assertEquals(<(wideLiteral.(type2))("31")>, this.map.getIfAbsent(<(literal.(type1))("31")>, <(literal.(type2))("5")>)<wideDelta.(type2)>);
        assertEquals(<(wideLiteral.(type2))("32")>, this.map.getIfAbsent(<(literal.(type1))("32")>, <(literal.(type2))("5")>)<wideDelta.(type2)>);
    }

    @Test
    public void getOrThrow()
    {
        assertEquals(<(wideLiteral.(type2))("0")>, this.map.getOrThrow(<(literal.(type1))("0")>)<wideDelta.(type2)>);
        assertEquals(<(wideLiteral.(type2))("31")>, this.map.getOrThrow(<(literal.(type1))("31")>)<wideDelta.(type2)>);
        assertEquals(<(wideLiteral.(type2))("32")>, this.map.getOrThrow(<(literal.(type1))("32")>)<wideDelta.(type2)>);

        assertThrows(IllegalStateException.class, () -> this.map.getOrThrow(<(literal.(type1))("1")>));
        assertThrows(IllegalStateException.class, () -> this.map.getOrThrow(<(literal.(type1))("33")>));
    }

    @Test
    public void containsKey()
    {
        assertTrue(this.map.containsKey(<(literal.(type1))("0")>));
        assertTrue(this.map.containsKey(<(literal.(type1))("31")>));
        assertTrue(this.map.containsKey(<(literal.(type1))("32")>));
        assertFalse(this.map.containsKey(<(literal.(type1))("1")>));
        assertFalse(this.map.containsKey(<(literal.(type1))("5")>));
        assertFalse(this.map.containsKey(<(literal.(type1))("35")>));
    }

    @Test
    public void containsValue()
    {
        assertTrue(this.map.containsValue(<(literal.(type2))("0")>));
        assertTrue(this.map.containsValue(<(literal.(type2))("31")>));
        assertTrue(this.map.containsValue(<(literal.(type2))("32")>));
    }

    @Test
    public void contains()
    {
        assertTrue(this.map.contains(<(literal.(type2))("0")>));
        assertTrue(this.map.contains(<(literal.(type2))("31")>));
        assertTrue(this.map.contains(<(literal.(type2))("32")>));
    }

    @Test
    public void containsAll()
    {
        assertTrue(this.map.containsAll(<["0", "31", "32"]:(literal.(type2))(); separator=", ">));
        assertFalse(this.map.containsAll(<["0", "31", "35"]:(literal.(type2))(); separator=", ">));
        assertTrue(this.map.containsAll());
    }

    @Test
    public void containsAll_Iterable()
    {
        assertTrue(this.map.containsAll(<name2>ArrayList.newListWith(<["0", "31", "32"]:(literal.(type2))(); separator=", ">)));
        assertFalse(this.map.containsAll(<name2>ArrayList.newListWith(<["0", "31", "35"]:(literal.(type2))(); separator=", ">)));
        assertTrue(this.map.containsAll(new <name2>ArrayList()));
    }

    @Test
    public void size()
    {
        assertEquals(0, this.getEmptyMap().size());
        assertEquals(1, this.newWithKeysValues(<["0"]:keyValue(); separator=", ">).size());
        assertEquals(1, this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).size());

        assertEquals(2, this.newWithKeysValues(<["1", "5"]:keyValue(); separator=", ">).size());
        assertEquals(2, this.newWithKeysValues(<["0", "5"]:keyValue(); separator=", ">).size());
        assertEquals(3, this.newWithKeysValues(<["1", "0", "5"]:keyValue(); separator=", ">).size());
        assertEquals(2, this.newWithKeysValues(<["6", "5"]:keyValue(); separator=", ">).size());
    }

    @Test
    public void isEmpty()
    {
        assertTrue(this.getEmptyMap().isEmpty());
        assertFalse(this.map.isEmpty());
        assertFalse(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).isEmpty());
        assertFalse(this.newWithKeysValues(<["0"]:keyValue(); separator=", ">).isEmpty());
        assertFalse(this.newWithKeysValues(<["50"]:keyValue(); separator=", ">).isEmpty());
    }

    @Test
    public void notEmpty()
    {
        assertFalse(this.getEmptyMap().notEmpty());
        assertTrue(this.map.notEmpty());
        assertTrue(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).notEmpty());
        assertTrue(this.newWithKeysValues(<["0"]:keyValue(); separator=", ">).notEmpty());
        assertTrue(this.newWithKeysValues(<["50"]:keyValue(); separator=", ">).notEmpty());
    }

    @Test
    public void testEquals()
    {
        <name1><name2>Map map1 = this.newWithKeysValues(<["0", "1", "32"]:keyValue(); separator=", ">);
        <name1><name2>Map map2 = this.newWithKeysValues(<["32", "0", "1"]:keyValue(); separator=", ">);
        <name1><name2>Map map3 = this.newWithKeysValues(<["0"]:keyValue(); separator=", ">, <(literal.(type1))("1")>, <(literal.(type2))("2")>, <["32"]:keyValue(); separator=", ">);
        <name1><name2>Map map4 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <["1", "32"]:keyValue(); separator=", ">);
        <name1><name2>Map map5 = this.newWithKeysValues(<["0", "1"]:keyValue(); separator=", ">, <(literal.(type1))("32")>, <(literal.(type2))("33")>);
        <name1><name2>Map map6 = this.newWithKeysValues(<(literal.(type1))("50")>, <(literal.(type2))("0")>, <(literal.(type1))("60")>, <(literal.(type2))("1")>, <(literal.(type1))("70")>, <(literal.(type2))("33")>);
        <name1><name2>Map map7 = this.newWithKeysValues(<(literal.(type1))("50")>, <(literal.(type2))("0")>, <(literal.(type1))("60")>, <(literal.(type2))("1")>);
        <name1><name2>Map map8 = this.newWithKeysValues(<["0", "1"]:keyValue(); separator=", ">);
        <name1><name2>Map map9 = this.newWithKeysValues(<["0"]:keyValue(); separator=", ">);

        Verify.assertEqualsAndHashCode(map1, map2);
        Verify.assertPostSerializedEqualsAndHashCode(map1);
        Verify.assertPostSerializedEqualsAndHashCode(map6);
        Verify.assertPostSerializedEqualsAndHashCode(map8);
        Verify.assertPostSerializedEqualsAndHashCode(this.getEmptyMap());
        assertNotEquals(map1, map3);
        assertNotEquals(this.getEmptyMap(), map3);
        assertNotEquals(map9, this.getEmptyMap());
        assertNotEquals(this.getEmptyMap(), map9);
        assertNotEquals(<name2>ArrayList.newListWith(<(literal.(type2))("0")>), map9);
        assertNotEquals(map1, map4);
        assertNotEquals(map1, map5);
        assertNotEquals(map7, map6);
        assertNotEquals(map7, map8);

        assertEquals(map1, <name1><name2>Maps.mutable.ofAll(map1));
        assertEquals(map1, <name1><name2>Maps.immutable.ofAll(map1));
    }

    @Test
    public void testHashCode()
    {
        assertEquals(
                UnifiedMap.newWithKeysValues(<["0", "1", "32"]:keyValue(); separator=", ">).hashCode(),
                this.newWithKeysValues(<["32", "0", "1"]:keyValue(); separator=", ">).hashCode());
        assertEquals(
                UnifiedMap.newWithKeysValues(<(literal.(type1))("50")>, <(literal.(type2))("0")>, <(literal.(type1))("60")>, <(literal.(type2))("1")>, <(literal.(type1))("70")>, <(literal.(type2))("33")>).hashCode(),
                this.newWithKeysValues(<(literal.(type1))("50")>, <(literal.(type2))("0")>, <(literal.(type1))("60")>, <(literal.(type2))("1")>, <(literal.(type1))("70")>, <(literal.(type2))("33")>).hashCode());
        assertEquals(UnifiedMap.newMap().hashCode(), this.getEmptyMap().hashCode());
        assertEquals(UnifiedMap.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>).hashCode(), this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>).hashCode());
    }

    @Test
    public void testToString()
    {
        assertEquals("{}", this.getEmptyMap().toString());
        assertEquals("{<(toStringLiteral.(type1))("0")>=<(toStringLiteral.(type2))("0")>}", this.newWithKeysValues(<["0"]:keyValue(); separator=", ">).toString());
        assertEquals("{<(toStringLiteral.(type1))("1")>=<(toStringLiteral.(type2))("1")>}", this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).toString());
        assertEquals("{<(toStringLiteral.(type1))("5")>=<(toStringLiteral.(type2))("5")>}", this.newWithKeysValues(<["5"]:keyValue(); separator=", ">).toString());

        <name1><name2>Map map1 = this.newWithKeysValues(<["0", "1"]:keyValue(); separator=", ">);
        assertTrue(
                map1.toString(),
                "{<(toStringLiteral.(type1))("0")>=<(toStringLiteral.(type2))("0")>, <(toStringLiteral.(type1))("1")>=<(toStringLiteral.(type2))("1")>}".equals(map1.toString())
                        || "{<(toStringLiteral.(type1))("1")>=<(toStringLiteral.(type2))("1")>, <(toStringLiteral.(type1))("0")>=<(toStringLiteral.(type2))("0")>}".equals(map1.toString()));

        <name1><name2>Map map2 = this.newWithKeysValues(<["1", "32"]:keyValue(); separator=", ">);
        assertTrue(
                map2.toString(),
                "{<(toStringLiteral.(type1))("1")>=<(toStringLiteral.(type2))("1")>, <(toStringLiteral.(type1))("32")>=<(toStringLiteral.(type2))("32")>}".equals(map2.toString())
                        || "{<(toStringLiteral.(type1))("32")>=<(toStringLiteral.(type2))("32")>, <(toStringLiteral.(type1))("1")>=<(toStringLiteral.(type2))("1")>}".equals(map2.toString()));

        <name1><name2>Map map3 = this.newWithKeysValues(<["0", "32"]:keyValue(); separator=", ">);
        assertTrue(
                map3.toString(),
                "{<(toStringLiteral.(type1))("0")>=<(toStringLiteral.(type2))("0")>, <(toStringLiteral.(type1))("32")>=<(toStringLiteral.(type2))("32")>}".equals(map3.toString())
                        || "{<(toStringLiteral.(type1))("32")>=<(toStringLiteral.(type2))("32")>, <(toStringLiteral.(type1))("0")>=<(toStringLiteral.(type2))("0")>}".equals(map3.toString()));

        <name1><name2>Map map4 = this.newWithKeysValues(<["32", "33"]:keyValue(); separator=", ">);
        assertTrue(
                map4.toString(),
                "{<(toStringLiteral.(type1))("32")>=<(toStringLiteral.(type2))("32")>, <(toStringLiteral.(type1))("33")>=<(toStringLiteral.(type2))("33")>}".equals(map4.toString())
                        || "{<(toStringLiteral.(type1))("33")>=<(toStringLiteral.(type2))("33")>, <(toStringLiteral.(type1))("32")>=<(toStringLiteral.(type2))("32")>}".equals(map4.toString()));
    }

    @Test
    public void forEach()
    {
        <name1><name2>Map map0 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type2>[] sum0 = new <type2>[1];
        map0.forEach(each -> sum0[0] += each);
        assertEquals(<(wideLiteral.(type2))("5")>, sum0[0]<wideDelta.(type2)>);

        <name1><name2>Map map1 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type2>[] sum1 = new <type2>[1];
        map1.forEach(each -> sum1[0] += each);
        assertEquals(<(wideLiteral.(type2))("6")>, sum1[0]<wideDelta.(type2)>);

        <name1><name2>Map map01 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("1")>, <(literal.(type2))("2")>);
        <type2>[] sum01 = new <type2>[1];
        map01.forEach(each -> sum01[0] += each);
        assertEquals(<(wideLiteral.(type2))("3")>, sum01[0]<wideDelta.(type2)>);

        <name1><name2>Map map = this.newWithKeysValues(<(literal.(type1))("3")>, <(literal.(type2))("4")>, <(literal.(type1))("4")>, <(literal.(type2))("5")>);
        <type2>[] sum = new <type2>[1];
        map.forEach(each -> sum[0] += each);
        assertEquals(<(wideLiteral.(type2))("9")>, sum[0]<wideDelta.(type2)>);

        <name1><name2>Map map2 = this.getEmptyMap();
        <type2>[] sum2 = new <type2>[1];
        map2.forEach(each -> sum2[0] += each);
        assertEquals(<(wideLiteral.(type2))("0")>, sum2[0]<wideDelta.(type2)>);

        <name1><name2>Map map3 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>);
        <type2>[] sum3 = new <type2>[1];
        map3.forEach(each -> sum3[0] += each);
        assertEquals(<(wideLiteral.(type2))("2")>, sum3[0]<wideDelta.(type2)>);
    }

    @Test
    public void forEachValue()
    {
        <name1><name2>Map map0 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type2>[] sum0 = new <type2>[1];
        map0.forEachValue(each -> sum0[0] += each);
        assertEquals(<(wideLiteral.(type2))("5")>, sum0[0]<wideDelta.(type2)>);

        <name1><name2>Map map1 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type2>[] sum1 = new <type2>[1];
        map1.forEachValue(each -> sum1[0] += each);
        assertEquals(<(wideLiteral.(type2))("6")>, sum1[0]<wideDelta.(type2)>);

        <name1><name2>Map map01 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("1")>, <(literal.(type2))("2")>);
        <type2>[] sum01 = new <type2>[1];
        map01.forEachValue(each -> sum01[0] += each);
        assertEquals(<(wideLiteral.(type2))("3")>, sum01[0]<wideDelta.(type2)>);

        <name1><name2>Map map = this.newWithKeysValues(<(literal.(type1))("3")>, <(literal.(type2))("4")>, <(literal.(type1))("4")>, <(literal.(type2))("5")>);
        <type2>[] sum = new <type2>[1];
        map.forEachValue(each -> sum[0] += each);
        assertEquals(<(wideLiteral.(type2))("9")>, sum[0]<wideDelta.(type2)>);

        <name1><name2>Map map2 = this.getEmptyMap();
        <type2>[] sum2 = new <type2>[1];
        map2.forEachValue(each -> sum2[0] += each);
        assertEquals(<(wideLiteral.(type2))("0")>, sum2[0]<wideDelta.(type2)>);

        <name1><name2>Map map3 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>);
        <type2>[] sum3 = new <type2>[1];
        map3.forEachValue(each -> sum3[0] += each);
        assertEquals(<(wideLiteral.(type2))("2")>, sum3[0]<wideDelta.(type2)>);
    }

    @Test
    public void forEachKey()
    {
        <name1><name2>Map map0 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type1>[] sum0 = new <type1>[1];
        map0.forEachKey(each -> sum0[0] += each);
        assertEquals(<(wideLiteral.(type1))("3")>, sum0[0]<wideDelta.(type1)>);

        <name1><name2>Map map1 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type1>[] sum1 = new <type1>[1];
        map1.forEachKey(each -> sum1[0] += each);
        assertEquals(<(wideLiteral.(type1))("4")>, sum1[0]<wideDelta.(type1)>);

        <name1><name2>Map map01 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("1")>, <(literal.(type2))("2")>);
        <type1>[] sum01 = new <type1>[1];
        map01.forEachKey(each -> sum01[0] += each);
        assertEquals(<(wideLiteral.(type1))("1")>, sum01[0]<wideDelta.(type1)>);

        <name1><name2>Map map = this.newWithKeysValues(<(literal.(type1))("3")>, <(literal.(type2))("4")>, <(literal.(type1))("4")>, <(literal.(type2))("5")>);
        <type1>[] sum = new <type1>[1];
        map.forEachKey(each -> sum[0] += each);
        assertEquals(<(wideLiteral.(type1))("7")>, sum[0]<wideDelta.(type1)>);

        <name1><name2>Map map2 = this.getEmptyMap();
        <type1>[] sum2 = new <type1>[1];
        map2.forEachKey(each -> sum2[0] += each);
        assertEquals(<(wideLiteral.(type1))("0")>, sum2[0]<wideDelta.(type1)>);

        <name1><name2>Map map3 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>);
        <type1>[] sum3 = new <type1>[1];
        map3.forEachKey(each -> sum3[0] += each);
        assertEquals(<(wideLiteral.(type1))("1")>, sum3[0]<wideDelta.(type1)>);
    }

    @Test
    public void forEachKeyValue()
    {
        <name1><name2>Map map0 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type1>[] sumKey0 = new <type1>[1];
        <type2>[] sumValue0 = new <type2>[1];
        map0.forEachKeyValue((<type1> eachKey, <type2> eachValue) ->
        {
            sumKey0[0] += eachKey;
            sumValue0[0] += eachValue;
        });
        assertEquals(<(wideLiteral.(type1))("3")>, sumKey0[0]<wideDelta.(type1)>);
        assertEquals(<(wideLiteral.(type2))("5")>, sumValue0[0]<wideDelta.(type2)>);

        <name1><name2>Map map1 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);
        <type1>[] sumKey1 = new <type1>[1];
        <type2>[] sumValue1 = new <type2>[1];
        map1.forEachKeyValue((<type1> eachKey, <type2> eachValue) ->
        {
            sumKey1[0] += eachKey;
            sumValue1[0] += eachValue;
        });
        assertEquals(<(wideLiteral.(type1))("4")>, sumKey1[0]<wideDelta.(type1)>);
        assertEquals(<(wideLiteral.(type2))("6")>, sumValue1[0]<wideDelta.(type2)>);

        <name1><name2>Map map01 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("1")>, <(literal.(type2))("2")>);
        <type1>[] sumKey01 = new <type1>[1];
        <type2>[] sumValue01 = new <type2>[1];
        map01.forEachKeyValue((<type1> eachKey, <type2> eachValue) ->
        {
            sumKey01[0] += eachKey;
            sumValue01[0] += eachValue;
        });
        assertEquals(<(wideLiteral.(type1))("1")>, sumKey01[0]<wideDelta.(type1)>);
        assertEquals(<(wideLiteral.(type2))("3")>, sumValue01[0]<wideDelta.(type2)>);

        <name1><name2>Map map = this.newWithKeysValues(<(literal.(type1))("3")>, <(literal.(type2))("4")>, <(literal.(type1))("4")>, <(literal.(type2))("5")>);
        <type1>[] sumKey = new <type1>[1];
        <type2>[] sumValue = new <type2>[1];
        map.forEachKeyValue((<type1> eachKey, <type2> eachValue) ->
        {
            sumKey[0] += eachKey;
            sumValue[0] += eachValue;
        });
        assertEquals(<(wideLiteral.(type1))("7")>, sumKey[0]<wideDelta.(type1)>);
        assertEquals(<(wideLiteral.(type2))("9")>, sumValue[0]<wideDelta.(type2)>);

        <name1><name2>Map map2 = this.getEmptyMap();
        <type1>[] sumKey2 = new <type1>[1];
        <type2>[] sumValue2 = new <type2>[1];
        map2.forEachKeyValue((<type1> eachKey, <type2> eachValue) ->
        {
            sumKey2[0] += eachKey;
            sumValue2[0] += eachValue;
        });
        assertEquals(<(wideLiteral.(type1))("0")>, sumKey2[0]<wideDelta.(type1)>);
        assertEquals(<(wideLiteral.(type2))("0")>, sumValue2[0]<wideDelta.(type2)>);

        <name1><name2>Map map3 = this.newWithKeysValues(<(literal.(type1))("3")>, <(literal.(type2))("5")>);
        <type1>[] sumKey3 = new <type1>[1];
        <type2>[] sumValue3 = new <type2>[1];
        map3.forEachKeyValue((<type1> eachKey, <type2> eachValue) ->
        {
            sumKey3[0] += eachKey;
            sumValue3[0] += eachValue;
        });
        assertEquals(<(wideLiteral.(type1))("3")>, sumKey3[0]<wideDelta.(type1)>);
        assertEquals(<(wideLiteral.(type2))("5")>, sumValue3[0]<wideDelta.(type2)>);
    }

    @Test
    public void injectIntoKeyValue()
    {
        <name1><name2>Map map0 = this.newWithKeysValues(<(literal.(type1))("0")>, <(literal.(type2))("1")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>);

        Long sum0 = map0.injectIntoKeyValue(Long.valueOf(0), (Long sum, <type1> eachKey, <type2> eachValue) ->
        {
            return Long.valueOf((long) (sum + eachKey + eachValue));
        });
        assertEquals(Long.valueOf(8), sum0);

        <name1><name2>Map copy = map0.injectIntoKeyValue(<name1><name2>Maps.mutable.empty(), Mutable<name1><name2>Map::withKeyValue);
        assertEquals(map0, copy);
    }

    @Test
    public void makeString()
    {
        assertEquals("", this.getEmptyMap().makeString());
        assertEquals("", this.getEmptyMap().makeString(", "));
        assertEquals("[]", this.getEmptyMap().makeString("[", "/", "]"));
        assertEquals("<(toStringLiteral.(type2))("0")>", this.newWithKeysValues(<keyValue("0")>).makeString());
        assertEquals("<(toStringLiteral.(type2))("0")>", this.newWithKeysValues(<keyValue("0")>).makeString(", "));
        assertEquals("[<(toStringLiteral.(type2))("0")>]", this.newWithKeysValues(<keyValue("0")>).makeString("[", "/", "]"));
        assertEquals("<(toStringLiteral.(type2))("1")>", this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>).makeString());
        assertEquals("<(toStringLiteral.(type2))("5")>", this.newWithKeysValues(<(literal.(type1))("5")>, <(literal.(type2))("5")>).makeString());

        <name1><name2>Map map1 = this.newWithKeysValues(<["0", "1"]:keyValue(); separator=", ">);
        assertTrue(
                map1.makeString(),
                "<(toStringLiteral.(type2))("0")>, <(toStringLiteral.(type2))("1")>".equals(map1.makeString())
                        || "<(toStringLiteral.(type2))("1")>, <(toStringLiteral.(type2))("0")>".equals(map1.makeString()));

        <name1><name2>Map map2 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("32")>, <(literal.(type2))("32")>);
        assertTrue(
                map2.makeString("[", "/", "]"),
                "[<(toStringLiteral.(type2))("1")>/<(toStringLiteral.(type2))("32")>]".equals(map2.makeString("[", "/", "]"))
                        || "[<(toStringLiteral.(type2))("32")>/<(toStringLiteral.(type2))("1")>]".equals(map2.makeString("[", "/", "]")));

        <name1><name2>Map map3 = this.newWithKeysValues(<keyValue("0")>, <(literal.(type1))("32")>, <(literal.(type2))("32")>);
        assertTrue(
                map3.makeString("~"),
                "<(toStringLiteral.(type2))("0")>~<(toStringLiteral.(type2))("32")>".equals(map3.makeString("~"))
                        || "<(toStringLiteral.(type2))("32")>~<(toStringLiteral.(type2))("0")>".equals(map3.makeString("~")));

        <name1><name2>Map map4 = this.newWithKeysValues(<(literal.(type1))("32")>, <(literal.(type2))("32")>, <(literal.(type1))("33")>, <(literal.(type2))("33")>);
        assertTrue(
                map4.makeString("[", ", ", "]"),
                "[<(toStringLiteral.(type2))("32")>, <(toStringLiteral.(type2))("33")>]".equals(map4.makeString("[", ", ", "]"))
                        || "[<(toStringLiteral.(type2))("33")>, <(toStringLiteral.(type2))("32")>]".equals(map4.makeString("[", ", ", "]")));
    }

    @Test
    public void appendString()
    {
        Appendable appendable = new StringBuilder();
        this.getEmptyMap().appendString(appendable);
        assertEquals("", appendable.toString());

        this.getEmptyMap().appendString(appendable, "/");
        assertEquals("", appendable.toString());

        this.getEmptyMap().appendString(appendable, "{", "/", "}");
        assertEquals("{}", appendable.toString());

        Appendable appendable0 = new StringBuilder();
        this.newWithKeysValues(<keyValue("0")>).appendString(appendable0);
        assertEquals("<(toStringLiteral.(type2))("0")>", appendable0.toString());

        Appendable appendable01 = new StringBuilder();
        this.newWithKeysValues(<keyValue("0")>).appendString(appendable01, "/");
        assertEquals("<(toStringLiteral.(type2))("0")>", appendable01.toString());

        Appendable appendable02 = new StringBuilder();
        this.newWithKeysValues(<keyValue("0")>).appendString(appendable02, "{", "/", "}");
        assertEquals("{<(toStringLiteral.(type2))("0")>}", appendable02.toString());

        Appendable appendable1 = new StringBuilder();
        this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>).appendString(appendable1);
        assertEquals("<(toStringLiteral.(type2))("1")>", appendable1.toString());

        Appendable appendable2 = new StringBuilder();
        this.newWithKeysValues(<(literal.(type1))("5")>, <(literal.(type2))("5")>).appendString(appendable2);
        assertEquals("<(toStringLiteral.(type2))("5")>", appendable2.toString());

        Appendable appendable3 = new StringBuilder();
        <name1><name2>Map map1 = this.newWithKeysValues(<["0", "1"]:keyValue(); separator=", ">);
        map1.appendString(appendable3);
        assertTrue(
                appendable3.toString(),
                "<(toStringLiteral.(type2))("0")>, <(toStringLiteral.(type2))("1")>".equals(appendable3.toString())
                        || "<(toStringLiteral.(type2))("1")>, <(toStringLiteral.(type2))("0")>".equals(appendable3.toString()));

        Appendable appendable4 = new StringBuilder();
        <name1><name2>Map map2 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("32")>, <(literal.(type2))("32")>);
        map2.appendString(appendable4, "[", "/", "]");
        assertTrue(
                appendable4.toString(),
                "[<(toStringLiteral.(type2))("1")>/<(toStringLiteral.(type2))("32")>]".equals(appendable4.toString())
                        || "[<(toStringLiteral.(type2))("32")>/<(toStringLiteral.(type2))("1")>]".equals(appendable4.toString()));

        Appendable appendable5 = new StringBuilder();
        <name1><name2>Map map3 = this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("32")>, <(literal.(type2))("32")>);
        map3.appendString(appendable5, "[", "/", "]");
        assertTrue(
                appendable5.toString(),
                "[<(toStringLiteral.(type2))("1")>/<(toStringLiteral.(type2))("32")>]".equals(appendable5.toString())
                        || "[<(toStringLiteral.(type2))("32")>/<(toStringLiteral.(type2))("1")>]".equals(appendable5.toString()));

        Appendable appendable6 = new StringBuilder();
        map1.appendString(appendable6, "/");
        assertTrue(
                appendable6.toString(),
                "<(toStringLiteral.(type2))("0")>/<(toStringLiteral.(type2))("1")>".equals(appendable6.toString())
                        || "<(toStringLiteral.(type2))("1")>/<(toStringLiteral.(type2))("0")>".equals(appendable6.toString()));
    }

    @Test
    public void select()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        <name1><name2>Map actual1 = map.select((<type1> key, <type2> value) -> <(equals.(type1))("key", {<(literal.(type1))("1")>})> || <(equals.(type2))("value", {<(literal.(type2))("3")>})>);
        assertEquals(<name1><name2>HashMap.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("3")>, <(literal.(type2))("3")>), actual1);
        <name1><name2>Map actual2 = map.select((<type1> key, <type2> value) -> <(equals.(type1))("key", {<(literal.(type1))("0")>})> || <(equals.(type2))("value", {<(literal.(type2))("2")>})>);
        assertEquals(<name1><name2>HashMap.newWithKeysValues(<keyValue("0")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>), actual2);
    }

    @Test
    public void reject()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        <name1><name2>Map actual1 = map.reject((<type1> key, <type2> value) -> <(equals.(type1))("key", {<(literal.(type1))("1")>})> || <(equals.(type2))("value", {<(literal.(type2))("3")>})>);
        assertEquals(<name1><name2>HashMap.newWithKeysValues(<keyValue("0")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>), actual1);
        <name1><name2>Map actual2 = map.reject((<type1> key, <type2> value) -> <(equals.(type1))("key", {<(literal.(type1))("0")>})> || <(equals.(type2))("value", {<(literal.(type2))("2")>})>);
        assertEquals(<name1><name2>HashMap.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("3")>, <(literal.(type2))("3")>), actual2);
    }

    @Test
    public void select_value()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        <name2>Iterable actual1 = map.select(<name2>Predicates.greaterThan(<(literal.(type2))("1")>));
        assertEquals(<name2>Bags.immutable.with(<(literal.(type2))("2")>, <(literal.(type2))("3")>), actual1);
        <name2>Iterable actual2 = map.select(<name2>Predicates.lessThan(<(literal.(type2))("2")>));
        assertEquals(<name2>Bags.immutable.with(<(literal.(type2))("0")>, <(literal.(type2))("1")>), actual2);
    }

    @Test
    public void reject_value()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        <name2>Iterable actual1 = map.reject(<name2>Predicates.lessThan(<(literal.(type2))("2")>));
        assertEquals(<name2>Bags.immutable.with(<(literal.(type2))("2")>, <(literal.(type2))("3")>), actual1);
        <name2>Iterable actual2 = map.reject(<name2>Predicates.greaterThan(<(literal.(type2))("1")>));
        assertEquals(<name2>Bags.immutable.with(<(literal.(type2))("0")>, <(literal.(type2))("1")>), actual2);
    }

    @Test
    public void collect()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);

        <name2>ToObjectFunction\<<primitive2.wrapperName>\> function = parameter -> <(castIntToNarrowTypeWithParens.(type2))("parameter + 1")>;
        assertEquals(Bags.immutable.with(<["1", "2", "3", "4"]:(literal.(type2))(); separator=", ">), map.collect(function));
        assertEquals(Bags.immutable.empty(), this.getEmptyMap().collect(function));
        assertEquals(Bags.immutable.with(<(literal.(type2))("2")>), this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).collect(function));
    }

    @Test
    public void count()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(2, map.count(<name2>Predicates.greaterThan(<(literal.(type2))("1")>)));
        assertEquals(2, map.count(<name2>Predicates.lessThan(<(literal.(type2))("2")>)));
    }

    @Test
    public void detectIfNone_value()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        <type2> resultNotFound = map.detectIfNone(<name2>Predicates.greaterThan(<(literal.(type2))("5")>), <(literal.(type2))("5")>);
        assertEquals(<(literal.(type2))("5")>, resultNotFound<(wideDelta.(type2))>);

        assertEquals(<(literal.(type2))("5")>, this.getEmptyMap().detectIfNone(<name2>Predicates.equal(<(literal.(type2))("0")>), <(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("5")>, this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).detectIfNone(<name2>Predicates.equal(<(literal.(type2))("0")>), <(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("1")>, this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).detectIfNone(<name2>Predicates.equal(<(literal.(type2))("1")>), <(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("0")>, map.detectIfNone(<name2>Predicates.equal(<(literal.(type2))("0")>), <(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("1")>, map.detectIfNone(<name2>Predicates.equal(<(literal.(type2))("1")>), <(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("2")>, map.detectIfNone(<name2>Predicates.equal(<(literal.(type2))("2")>), <(literal.(type2))("5")>)<(wideDelta.(type2))>);
    }

    @Test
    public void anySatisfy()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertFalse(this.getEmptyMap().anySatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertFalse(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).anySatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertTrue(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).anySatisfy(<name2>Predicates.equal(<(literal.(type2))("1")>)));
        assertTrue(map.anySatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertTrue(map.anySatisfy(<name2>Predicates.equal(<(literal.(type2))("1")>)));
        assertTrue(map.anySatisfy(<name2>Predicates.equal(<(literal.(type2))("2")>)));
        assertFalse(map.anySatisfy(<name2>Predicates.greaterThan(<(literal.(type2))("5")>)));
    }

    @Test
    public void allSatisfy()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertTrue(this.getEmptyMap().allSatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertFalse(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).allSatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertTrue(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).allSatisfy(<name2>Predicates.equal(<(literal.(type2))("1")>)));
        assertFalse(map.allSatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertFalse(map.allSatisfy(<name2>Predicates.equal(<(literal.(type2))("1")>)));
        assertFalse(map.allSatisfy(<name2>Predicates.equal(<(literal.(type2))("2")>)));
        assertTrue(map.allSatisfy(<name2>Predicates.lessThan(<(literal.(type2))("5")>)));
        <name1><name2>Map map1 = this.newWithKeysValues(<["2", "3"]:keyValue(); separator=", ">);
        assertFalse(map1.allSatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
    }

    @Test
    public void allSatisfyKeyValue()
    {
        assertTrue(this.getEmptyMap().allSatisfyKeyValue((k, v) -> <name2>Predicates.equal(v).accept((<type2>) k)));
        <name1><name2>Map map1 = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertTrue(map1.allSatisfyKeyValue((k, v) -> <name2>Predicates.equal(v).accept((<type2>) k)));
        assertFalse(map1.allSatisfyKeyValue((k, v) -> <name2>Predicates.lessThan(v).accept((<type2>) k)));
        <name1><name2>Map map2 = this.newWithKeysValues(<["0"]:keyValue(); separator=", ">);
        assertTrue(map2.allSatisfyKeyValue((k, v) -> <name2>Predicates.equal(v).accept((<type2>) k)));
        assertFalse(map2.allSatisfyKeyValue((k, v) -> <name2>Predicates.lessThan(v).accept((<type2>) k)));
    }

    @Test
    public void noneSatisfy()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertTrue(this.getEmptyMap().noneSatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertTrue(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).noneSatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertFalse(this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).noneSatisfy(<name2>Predicates.equal(<(literal.(type2))("1")>)));
        assertFalse(map.noneSatisfy(<name2>Predicates.equal(<(literal.(type2))("0")>)));
        assertFalse(map.noneSatisfy(<name2>Predicates.equal(<(literal.(type2))("1")>)));
        assertFalse(map.noneSatisfy(<name2>Predicates.equal(<(literal.(type2))("2")>)));
        assertTrue(map.noneSatisfy(<name2>Predicates.lessThan(<(literal.(type2))("0")>)));
    }

    @Test
    public void max()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(<(literal.(type2))("3")>, map.max()<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("3")>, this.newWithKeysValues(<["3"]:keyValue(); separator=", ">).max()<(wideDelta.(type2))>);
    }

    @Test
    public void min()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["1", "2", "3", "0"]:keyValue(); separator=", ">);
        assertEquals(<(literal.(type2))("0")>, map.min()<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("3")>, this.newWithKeysValues(<["3"]:keyValue(); separator=", ">).min()<(wideDelta.(type2))>);
    }

    @Test
    public void max_empty_throws()
    {
        assertThrows(NoSuchElementException.class, () -> this.getEmptyMap().max());
    }

    @Test
    public void min_empty_throws()
    {
        assertThrows(NoSuchElementException.class, () -> this.getEmptyMap().min());
    }

    @Test
    public void minIfEmpty()
    {
        assertEquals(<(wideLiteral.(type2))("5")>, this.getEmptyMap().minIfEmpty(<(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(wideLiteral.(type2))("0")>, this.getEmptyMap().minIfEmpty(<(literal.(type2))("0")>)<(wideDelta.(type2))>);
        <name1><name2>Map map = this.newWithKeysValues(<["1", "0", "9", "7"]:keyValue(); separator=", ">);
        assertEquals(<(wideLiteral.(type2))("0")>, map.minIfEmpty(<(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("3")>, this.newWithKeysValues(<["3"]:keyValue(); separator=", ">).maxIfEmpty(<(literal.(type2))("5")>)<(wideDelta.(type2))>);
    }

    @Test
    public void maxIfEmpty()
    {
        assertEquals(<(wideLiteral.(type2))("5")>, this.getEmptyMap().maxIfEmpty(<(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(wideLiteral.(type2))("0")>, this.getEmptyMap().maxIfEmpty(<(literal.(type2))("0")>)<(wideDelta.(type2))>);
        <name1><name2>Map map = this.newWithKeysValues(<["1", "0", "9", "7"]:keyValue(); separator=", ">);
        assertEquals(<(wideLiteral.(type2))("9")>, map.maxIfEmpty(<(literal.(type2))("5")>)<(wideDelta.(type2))>);
        assertEquals(<(literal.(type2))("3")>, this.newWithKeysValues(<["3"]:keyValue(); separator=", ">).minIfEmpty(<(literal.(type2))("5")>)<(wideDelta.(type2))>);
    }

    @Test
    public void sum()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(<(literal.(type2))("6")>, map.sum()<(wideDelta.(type2))>);
        <name1><name2>Map map2 = this.newWithKeysValues(<["2", "3", "4"]:keyValue(); separator=", ">);
        assertEquals(<(literal.(type2))("9")>, map2.sum()<(wideDelta.(type2))>);
        <name1><name2>Map map3 = this.newWithKeysValues(<["2"]:keyValue(); separator=", ">);
        assertEquals(<(literal.(type2))("2")>, map3.sum()<(wideDelta.(type2))>);
    }

    @Test
    public void average()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(1.5, map.average(), 0.0);
        <name1><name2>Map map1 = this.newWithKeysValues(<["1"]:keyValue(); separator=", ">);
        assertEquals(1.0, map1.average(), 0.0);
    }

    @Test
    public void averageThrowsOnEmpty()
    {
        assertThrows(ArithmeticException.class, () -> this.getEmptyMap().average());
    }

    @Test
    public void median()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(1.5, map.median(), 0.0);
        <name1><name2>Map map2 = this.newWithKeysValues(<["0", "1", "2"]:keyValue(); separator=", ">);
        assertEquals(1.0, map2.median(), 0.0);
        <name1><name2>Map map3 = this.newWithKeysValues(<["1"]:keyValue(); separator=", ">);
        assertEquals(1.0, map3.median(), 0.0);
    }

    @Test
    public void medianThrowsOnEmpty()
    {
        assertThrows(ArithmeticException.class, () -> this.getEmptyMap().median());
    }

    @Test
    public void toList()
    {
        assertEquals(<name2>ArrayList.newListWith(<(literal.(type2))("0")>), this.newWithKeysValues(<keyValue("0")>).toList());
        assertEquals(<name2>ArrayList.newListWith(<(literal.(type2))("1")>), this.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>).toList());
        assertEquals(<name2>ArrayList.newListWith(<(literal.(type2))("2")>), this.newWithKeysValues(<(literal.(type1))("2")>, <(literal.(type2))("2")>).toList());
        assertTrue(this.newWithKeysValues(<["2", "3"]:keyValue(); separator=", ">).toList().equals(<name2>ArrayList.newListWith(<["2", "3"]:(literal.(type2))(); separator=", ">))
                || this.newWithKeysValues(<["2", "3"]:keyValue(); separator=", ">).toList().equals(<name2>ArrayList.newListWith(<["3", "2"]:(literal.(type2))(); separator=", ">)));
    }

    @Test
    public void toSortedList()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(<name2>ArrayList.newListWith(<["0", "1", "2", "3"]:(literal.(type2))(); separator=", ">), map.toSortedList());
        assertEquals(<name2>ArrayList.newListWith(), this.getEmptyMap().toSortedList());
        assertEquals(<name2>ArrayList.newListWith(<(literal.(type2))("1")>), this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).toSortedList());
    }

    @Test
    public void toSet()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(<name2>HashSet.newSetWith(<["0", "1", "2", "3"]:(literal.(type2))(); separator=", ">), map.toSet());
        assertEquals(<name2>HashSet.newSetWith(), this.getEmptyMap().toSet());
        assertEquals(<name2>HashSet.newSetWith(<(literal.(type2))("1")>), this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).toSet());
    }

    @Test
    public void toBag()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["0", "1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(<name2>HashBag.newBagWith(<["0", "1", "2", "3"]:(literal.(type2))(); separator=", ">), map.toBag());
        assertEquals(<name2>HashBag.newBagWith(), this.getEmptyMap().toBag());
        assertEquals(<name2>HashBag.newBagWith(<(literal.(type2))("1")>), this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).toBag());
    }

    @Test
    public void <type2>Iterator()
    {
        Mutable<name2>Set expected = <name2>HashSet.newSetWith(<(literal.(type2))("0")>, <(literal.(type2))("31")>, <(literal.(type2))("32")>);
        Mutable<name2>Set actual = <name2>HashSet.newSetWith();

        <name2>Iterator iterator = this.map.<type2>Iterator();
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        assertFalse(iterator.hasNext());

        assertEquals(expected, actual);
        assertThrows(NoSuchElementException.class, iterator::next);
        assertThrows(NoSuchElementException.class, () -> this.getEmptyMap().<type2>Iterator().next());
    }

    @Test
    public void asLazy()
    {
        Lazy<name2>Iterable lazy = this.map.asLazy();
        assertTrue(lazy.toList().containsAll(<(literal.(type2))("0")>, <(literal.(type2))("31")>, <(literal.(type2))("32")>));
    }

    @Test
    public void keysView()
    {
        assertEquals(<name1>ArrayList.newListWith(<(literal.(type1))("0")>, <(literal.(type1))("31")>, <(literal.(type1))("32")>), this.map.keysView().toSortedList());
    }

    @Test
    public void keyValuesView()
    {
        MutableBag\<<name1><name2>Pair> expected = Bags.mutable.of();
        this.map.forEachKeyValue((<type1> key, <type2> value) -> expected.add(PrimitiveTuples.pair(key, value)));
        assertEquals(expected, this.map.keyValuesView().toBag());
    }

    @Test
    public void toSortedArray()
    {
        assertTrue(Arrays.equals(new <type2>[]{<(literal.(type2))("0")>, <(literal.(type2))("31")>, <(literal.(type2))("32")>}, this.map.toSortedArray()));
    }

    @Test
    public void toArray()
    {
        <name1><name2>Map map = this.newWithKeysValues(<["1", "2"]:keyValue(); separator=", ">);
        <type2>[] array = map.toArray();
        assertTrue(Arrays.equals(new <type2>[]{<(literal.(type2))("1")>, <(literal.(type2))("2")>}, array)
                || Arrays.equals(new <type2>[]{<(literal.(type2))("2")>, <(literal.(type2))("1")>}, array));
        assertEquals(0, this.getEmptyMap().toArray().length);
        assertTrue(Arrays.equals(new <type2>[]{<(literal.(type2))("1")>}, this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).toArray()));
    }

    @Test
    public void toImmutable()
    {
        assertEquals(this.classUnderTest(), this.classUnderTest().toImmutable());
        Verify.assertInstanceOf(Immutable<name1><name2>Map.class, this.classUnderTest().toImmutable());
    }

    @Test
    public void chunk()
    {
        <name2>Iterable iterable = this.newWithKeysValues(<["1", "2", "3"]:keyValue(); separator=", ">);
        assertEquals(
                Lists.mutable.with(
                        <name2>Bags.mutable.with(<["1"]:(literal.(type2))(); separator=", ">),
                        <name2>Bags.mutable.with(<["2"]:(literal.(type2))(); separator=", ">),
                        <name2>Bags.mutable.with(<["3"]:(literal.(type2))(); separator=", ">)).toSet(),
                iterable.chunk(1).toSet());
        assertTrue(
                Lists.mutable.with(
                        <name2>Bags.mutable.with(<["1", "2"]:(literal.(type2))(); separator=", ">),
                        <name2>Bags.mutable.with(<["3"]:(literal.(type2))(); separator=", ">)).toSet().equals(iterable.chunk(2).toSet())
                || Lists.mutable.with(
                        <name2>Bags.mutable.with(<["2", "3"]:(literal.(type2))(); separator=", ">),
                        <name2>Bags.mutable.with(<["1"]:(literal.(type2))(); separator=", ">)).toSet().equals(iterable.chunk(2).toSet())
                || Lists.mutable.with(
                        <name2>Bags.mutable.with(<["1", "3"]:(literal.(type2))(); separator=", ">),
                        <name2>Bags.mutable.with(<["2"]:(literal.(type2))(); separator=", ">)).toSet().equals(iterable.chunk(2).toSet()));
        assertEquals(
                Lists.mutable.with(
                        <name2>Bags.mutable.with(<["1", "2", "3"]:(literal.(type2))(); separator=", ">)).toSet(),
                iterable.chunk(3).toSet());
        assertEquals(
                Lists.mutable.with(<name2>Bags.mutable.with(<["1", "2", "3"]:(literal.(type2))(); separator=", ">)).toSet(),
                iterable.chunk(4).toSet());
        assertEquals(
                Lists.mutable.with(<name2>Bags.mutable.with(<["1"]:(literal.(type2))(); separator=", ">)).toSet(),
                this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).chunk(1).toSet());

        Verify.assertIterablesEqual(Lists.mutable.empty(), this.getEmptyMap().chunk(1));

        assertThrows(IllegalArgumentException.class, () -> iterable.chunk(0));
        assertThrows(IllegalArgumentException.class, () -> iterable.chunk(-1));
        assertThrows(IllegalArgumentException.class, () -> this.newWithKeysValues(<["1"]:keyValue(); separator=", ">).chunk(-1));
    }
}

>>

keyValue(value) ::= <<
<(literal.(type1))(value)>, <(literal.(type2))(value)>
>>
