import "copyrightAndOthers.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/set/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>SetTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.impl.set.mutable.primitive;

import java.util.NoSuchElementException;

import org.eclipse.collections.api.iterator.<name>Iterator;
import org.eclipse.collections.api.iterator.Mutable<name>Iterator;
import org.eclipse.collections.impl.block.factory.primitive.<name>Predicates;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertSame;

/**
 * JUnit test for {@link Unmodifiable<name>Set}.
 * This file was automatically generated from template file unmodifiablePrimitiveSetTest.stg.
 */
public class Unmodifiable<name>SetTest extends Abstract<name>SetTestCase
{
    @Override
    protected final Unmodifiable<name>Set classUnderTest()
    {
        return new Unmodifiable<name>Set(<name>HashSet.newSetWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Override
    protected Unmodifiable<name>Set newWith(<type>... elements)
    {
        return new Unmodifiable<name>Set(<name>HashSet.newSetWith(elements));
    }

    @Override
    @Test
    public void clear()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().clear());
    }

    @Override
    @Test
    public void add()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.newWith().add(<(literal.(type))("1")>));
    }

    <if(primitive.floatingPoint)><NaNTests()><endif>
    @Override
    @Test
    public void addAllArray()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().addAll());
    }

    @Override
    @Test
    public void addAllIterable()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.classUnderTest().addAll(this.newMutableCollectionWith()));
    }

    @Override
    @Test
    public void remove()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().remove(<(literal.(type))("1")>));
    }

    @Override
    @Test
    public void removeIf()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                    this.classUnderTest().removeIf(<name>Predicates.equal(<(literal.(type))("1")>)));
    }

    @Override
    @Test
    public void removeAll()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().removeAll());
    }

    @Override
    @Test
    public void removeAll_iterable()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                    this.classUnderTest().removeAll(this.newMutableCollectionWith()));
    }

    @Override
    @Test
    public void retainAll()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().retainAll());
    }

    @Override
    @Test
    public void retainAll_iterable()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                    this.classUnderTest().retainAll(this.newMutableCollectionWith()));
    }

    @Override
    @Test
    public void with()
    {
        assertThrows(UnsupportedOperationException.class, () -> this.newWith().with(<["1"]:(literal.(type))(); separator=", ">));
    }

    @Override
    @Test
    public void withAll()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                    this.newWith().withAll(this.newMutableCollectionWith(<(literal.(type))("1")>)));
    }

    @Override
    @Test
    public void without()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                this.newWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">).without(<(literal.(type))("9")>));
    }

    @Override
    @Test
    public void withoutAll()
    {
        assertThrows(UnsupportedOperationException.class, () ->
                        this.newWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">)
                        .withoutAll(this.newMutableCollectionWith(<["8", "9"]:(literal.(type))(); separator=", ">)));
    }

    @Override
    @Test
    public void contains()
    {
        Unmodifiable<name>Set set = this.newWith(<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">);
        assertFalse(set.contains(<(literal.(type))("29")>));
        assertFalse(set.contains(<(literal.(type))("49")>));

        <type>[] numbers = {<["14", "2", "30", "31", "32", "35", "0", "1"]:(literal.(type))(); separator=", ">};
        for (<type> number : numbers)
        {
            assertTrue(set.contains(number));
        }

        assertFalse(set.contains(<(literal.(type))("-1")>));
        assertFalse(set.contains(<(literal.(type))("29")>));
        assertFalse(set.contains(<(literal.(type))("49")>));

        Unmodifiable<name>Set set1 = this.newWith(<["0", "1", "1", "2", "2", "2"]:(literal.(type))(); separator=", ">);
        assertTrue(set1.contains(<(literal.(type))("0")>));
        assertTrue(set1.contains(<(literal.(type))("1")>));
        assertTrue(set1.contains(<(literal.(type))("2")>));
        assertFalse(set1.contains(<(literal.(type))("3")>));
    }

    @Override
    @Test
    public void <type>Iterator_throws_non_empty_collection()
    {
        Unmodifiable<name>Set set = this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">);
        <name>Iterator iterator = set.<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }
        assertThrows(NoSuchElementException.class, () -> iterator.next());
    }

    @Override
    @Test
    public void asUnmodifiable()
    {
        Unmodifiable<name>Set set = this.classUnderTest();
        super.asUnmodifiable();
        assertSame(set, set.asUnmodifiable());
        assertEquals(set, set.asUnmodifiable());
    }

    @Override
    public void <type>Iterator_with_remove()
    {
        Mutable<name>Iterator iterator = this.classUnderTest().<type>Iterator();
        assertTrue(iterator.hasNext());
        iterator.next();
        assertThrows(UnsupportedOperationException.class, iterator::remove);
    }

    @Override
    public void <type>Iterator_throws_for_remove_before_next()
    {
        Mutable<name>Iterator iterator = this.classUnderTest().<type>Iterator();
        assertTrue(iterator.hasNext());
        assertThrows(UnsupportedOperationException.class, iterator::remove);
    }

    @Override
    public void <type>Iterator_throws_for_consecutive_remove()
    {
        // Not applicable for Unmodifiable
    }
}

>>

NaNTests() ::= <<
@Override
@Test
public void add_NaN()
{
    assertThrows(UnsupportedOperationException.class, () -> this.newWith(<wrapperName>.NaN).add(<wrapperName>.NaN));
}

@Override
@Test
public void add_POSITIVE_INFINITY()
{
    assertThrows(UnsupportedOperationException.class, () ->
                    this.newWith(<wrapperName>.POSITIVE_INFINITY).add(<wrapperName>.POSITIVE_INFINITY));
}

@Override
@Test
public void add_NEGATIVE_INFINITY()
{
    assertThrows(UnsupportedOperationException.class, () ->
                this.newWith(<wrapperName>.NEGATIVE_INFINITY).add(<wrapperName>.NEGATIVE_INFINITY));
}

@Test
public void boxed()
{
    assertThrows(UnsupportedOperationException.class, () -> this.classUnderTest().boxed().add(<(literal.(type))("4")>));
}

>>
