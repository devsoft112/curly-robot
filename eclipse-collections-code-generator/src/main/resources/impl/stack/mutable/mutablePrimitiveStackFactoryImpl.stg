import "copyrightAndOthers.stg"

targetPath() ::= "org/eclipse/collections/impl/stack/mutable/primitive"

fileName(primitive) ::= "Mutable<primitive.name>StackFactoryImpl"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.impl.stack.mutable.primitive;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.factory.stack.primitive.Mutable<name>StackFactory;
import org.eclipse.collections.api.stack.primitive.Mutable<name>Stack;
<(wideStreamImport.(type))>

/**
 * Mutable<name>StackFactoryImpl is a factory implementation which creates instances of type {@link Mutable<name>Stack}.
 * This file was automatically generated from template file mutablePrimitiveStackFactoryImpl.stg.
 *
 * @since 6.0.
 */
public enum Mutable<name>StackFactoryImpl implements Mutable<name>StackFactory
{
    INSTANCE;

    @Override
    public Mutable<name>Stack empty()
    {
        return new <name>ArrayStack();
    }

    @Override
    public Mutable<name>Stack of()
    {
        return this.empty();
    }

    @Override
    public Mutable<name>Stack with()
    {
        return this.empty();
    }

    @Override
    public Mutable<name>Stack of(<type>... items)
    {
        return this.with(items);
    }

    @Override
    public Mutable<name>Stack with(<type>... items)
    {
        if (items.length == 0)
        {
            return this.empty();
        }
        return <name>ArrayStack.newStackWith(items);
    }

    @Override
    public Mutable<name>Stack ofAll(<name>Iterable items)
    {
        return this.withAll(items);
    }

    @Override
    public Mutable<name>Stack withAll(<name>Iterable items)
    {
        if (items.isEmpty())
        {
            return this.empty();
        }
        return <name>ArrayStack.newStack(items);
    }

    @Override
    public Mutable<name>Stack ofAllReversed(<name>Iterable items)
    {
        return this.withAllReversed(items);
    }

    @Override
    public Mutable<name>Stack withAllReversed(<name>Iterable items)
    {
        if (items.isEmpty())
        {
            return this.empty();
        }
        return <name>ArrayStack.newStackFromTopToBottom(items);
    }
    <(streamMethods.(type))()>
}

>>

streamMethods ::= [
    "byte": "noMethods",
    "short": "noMethods",
    "char": "noMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "noMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods() ::= <<
<\n>
/**
 * @since 9.0
 */
@Override
public Mutable<name>Stack ofAll(<(wideStream.(type))> items)
{
    return this.withAll(items);
}

/**
 * @since 9.0
 */
@Override
public Mutable<name>Stack withAll(<(wideStream.(type))> items)
{
    return this.with(items.toArray());
}
>>

noMethods() ::= ""

wideStream ::= [
    "int": "IntStream",
    "long": "LongStream",
    "double": "DoubleStream",
    default: "no matching wide type"
]

wideStreamImport ::= [
    "boolean": "",
    "byte": "",
    "short": "",
    "char": "",
    "int": "import java.util.stream.IntStream;",
    "long": "import java.util.stream.LongStream;",
    "float": "",
    "double": "import java.util.stream.DoubleStream;",
    default: "no matching wide type"
]
