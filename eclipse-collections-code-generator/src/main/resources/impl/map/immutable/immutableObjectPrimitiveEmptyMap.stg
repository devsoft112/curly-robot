import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

targetPath() ::= "org/eclipse/collections/impl/map/immutable/primitive"

fileName(primitive) ::= "ImmutableObject<primitive.name>EmptyMap"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.map.immutable.primitive;

import java.io.IOException;
import java.io.Serializable;
import java.util.NoSuchElementException;
import java.util.Set;

import org.eclipse.collections.api.Lazy<name>Iterable;
import org.eclipse.collections.api.LazyIterable;
import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.bag.primitive.Mutable<name>Bag;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.block.function.primitive.Object<name>ToObjectFunction;
import org.eclipse.collections.api.block.predicate.primitive.Object<name>Predicate;
import org.eclipse.collections.api.block.predicate.primitive.<name>Predicate;
import org.eclipse.collections.api.block.procedure.Procedure;
import org.eclipse.collections.api.block.procedure.primitive.Object<name>Procedure;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.collection.ImmutableCollection;
import org.eclipse.collections.api.collection.primitive.Immutable<name>Collection;
import org.eclipse.collections.api.collection.primitive.Mutable<name>Collection;
import org.eclipse.collections.api.iterator.<name>Iterator;
import org.eclipse.collections.api.list.primitive.Mutable<name>List;
import org.eclipse.collections.api.map.primitive.ImmutableObject<name>Map;
<if(!primitive.booleanPrimitive)>import org.eclipse.collections.api.map.primitive.Immutable<name>ObjectMap;<endif>
import org.eclipse.collections.api.map.primitive.Object<name>Map;
import org.eclipse.collections.api.set.primitive.Mutable<name>Set;
import org.eclipse.collections.api.tuple.primitive.Object<name>Pair;
import org.eclipse.collections.impl.bag.mutable.primitive.<name>HashBag;
import org.eclipse.collections.impl.collection.mutable.primitive.Unmodifiable<name>Collection;
import org.eclipse.collections.impl.factory.Lists;
import org.eclipse.collections.impl.factory.Sets;
import org.eclipse.collections.impl.factory.primitive.<name>Lists;
<if(!primitive.booleanPrimitive)>import org.eclipse.collections.impl.factory.primitive.<name>ObjectMaps;<endif>
import org.eclipse.collections.impl.iterator.ImmutableEmpty<name>Iterator;
import org.eclipse.collections.impl.lazy.primitive.Lazy<name>IterableAdapter;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.set.mutable.primitive.<name>HashSet;
import org.eclipse.collections.impl.utility.LazyIterate;

/**
 * ImmutableObject<name>EmptyMap is an optimization for {@link ImmutableObject<name>Map} of size 0.
 * This file was automatically generated from template file immutableObjectPrimitiveEmptyMap.stg.
 *
 * @since 4.0.
 */
final class ImmutableObject<name>EmptyMap\<K> implements ImmutableObject<name>Map\<K>, Serializable
{
    static final ImmutableObject<name>Map\<?> INSTANCE = new ImmutableObject<name>EmptyMap\<>();

    private static final long serialVersionUID = 1L;
    private static final <type> EMPTY_VALUE = <zero.(type)>;

    private Object readResolve()
    {
        return INSTANCE;
    }

    @Override
    public <name>Iterator <type>Iterator()
    {
        return ImmutableEmpty<name>Iterator.INSTANCE;
    }

    @Override
    public void forEach(<name>Procedure procedure)
    {
    }

    /**
     * @since 7.0.
     */
    @Override
    public void each(<name>Procedure procedure)
    {
    }

    @Override
    public int count(<name>Predicate predicate)
    {
        return 0;
    }

    @Override
    public boolean anySatisfy(<name>Predicate predicate)
    {
        return false;
    }

    @Override
    public boolean allSatisfy(<name>Predicate predicate)
    {
        return true;
    }

    @Override
    public boolean noneSatisfy(<name>Predicate predicate)
    {
        return true;
    }

    @Override
    public Immutable<name>Collection select(<name>Predicate predicate)
    {
        return <name>Lists.immutable.with();
    }

    @Override
    public Immutable<name>Collection reject(<name>Predicate predicate)
    {
        return <name>Lists.immutable.with();
    }

    @Override
    public <type> detectIfNone(<name>Predicate predicate, <type> ifNone)
    {
        return ifNone;
    }

    @Override
    public \<V> ImmutableCollection\<V> collect(<name>ToObjectFunction\<? extends V> function)
    {
        return Lists.immutable.of();
    }

    <(arithmeticMethods.(type))()>
    @Override
    public <type>[] toArray()
    {
        return new <type>[0];
    }

    @Override
    public boolean contains(<type> value)
    {
        return false;
    }

    @Override
    public boolean containsAll(<type>... source)
    {
        return source.length == 0;
    }

    @Override
    public boolean containsAll(<name>Iterable source)
    {
        return source.isEmpty();
    }

    @Override
    public Mutable<name>List toList()
    {
        return new <name>ArrayList();
    }

    @Override
    public Mutable<name>Set toSet()
    {
        return new <name>HashSet();
    }

    @Override
    public Mutable<name>Bag toBag()
    {
        return new <name>HashBag();
    }

    @Override
    public Lazy<name>Iterable asLazy()
    {
        return new Lazy<name>IterableAdapter(this);
    }

    @Override
    public ImmutableObject<name>Map\<K> newWithKeyValue(K key, <type> value)
    {
        return new ImmutableObject<name>SingletonMap\<>(key, value);
    }

    @Override
    public ImmutableObject<name>Map\<K> newWithoutKey(K key)
    {
        return this;
    }

    @Override
    public ImmutableObject<name>Map\<K> newWithoutAllKeys(Iterable\<? extends K> keys)
    {
        return this;
    }

    @Override
    public <type> get(Object key)
    {
        return EMPTY_VALUE;
    }

    @Override
    public <type> getOrThrow(Object key)
    {
        throw new IllegalStateException("Key " + key + " not present.");
    }

    @Override
    public <type> getIfAbsent(Object key, <type> ifAbsent)
    {
        return ifAbsent;
    }

    @Override
    public boolean containsKey(Object key)
    {
        return false;
    }

    @Override
    public boolean containsValue(<type> value)
    {
        return false;
    }

    @Override
    public void forEachValue(<name>Procedure procedure)
    {
    }

    @Override
    public void forEachKey(Procedure\<? super K> procedure)
    {
    }

    @Override
    public void forEachKeyValue(Object<name>Procedure\<? super K> object<name>Procedure)
    {
    }

    @Override
    public ImmutableObject<name>Map\<K> select(Object<name>Predicate\<? super K> object<name>Predicate)
    {
        return this;
    }

    @Override
    public ImmutableObject<name>Map\<K> reject(Object<name>Predicate\<? super K> object<name>Predicate)
    {
        return this;
    }

    @Override
    public ImmutableObject<name>Map\<K> toImmutable()
    {
        return this;
    }

    @Override
    public int size()
    {
        return 0;
    }

    @Override
    public boolean isEmpty()
    {
        return true;
    }

    @Override
    public boolean notEmpty()
    {
        return false;
    }

    @Override
    public \<T> T injectInto(T injectedValue, Object<name>ToObjectFunction\<? super T, ? extends T> function)
    {
        return injectedValue;
    }

    @Override
    public Set\<K> keySet()
    {
        return Sets.immutable.\<K>of().castToSet();
    }

    @Override
    public Mutable<name>Collection values()
    {
        return Unmodifiable<name>Collection.of(new <name>ArrayList());
    }

    @Override
    public LazyIterable\<K> keysView()
    {
        return LazyIterate.empty();
    }

    @Override
    public RichIterable\<Object<name>Pair\<K>\> keyValuesView()
    {
        return LazyIterate.empty();
    }

    <if(!primitive.booleanPrimitive)>
    @Override
    public Immutable<name>ObjectMap\<K> flipUniqueValues()
    {
        return <name>ObjectMaps.immutable.empty();
    }
    <endif>

    @Override
    public boolean equals(Object obj)
    {
        if (obj == this)
        {
            return true;
        }
        if (!(obj instanceof Object<name>Map))
        {
            return false;
        }
        Object<name>Map\<K> map = (Object<name>Map\<K>) obj;
        return map.isEmpty();
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    @Override
    public String toString()
    {
        return "{}";
    }

    @Override
    public String makeString()
    {
        return "";
    }

    @Override
    public String makeString(String separator)
    {
        return "";
    }

    @Override
    public String makeString(String start, String separator, String end)
    {
        return start + end;
    }

    @Override
    public void appendString(Appendable appendable)
    {
    }

    @Override
    public void appendString(Appendable appendable, String separator)
    {
    }

    @Override
    public void appendString(Appendable appendable, String start, String separator, String end)
    {
        try
        {
            appendable.append(start);
            appendable.append(end);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods() ::= <<
@Override
public <wideType.(type)> sum()
{
    return <wideZero.(type)>;
}

@Override
public <type> min()
{
    throw new NoSuchElementException();
}

@Override
public <type> max()
{
    throw new NoSuchElementException();
}

@Override
public <type> maxIfEmpty(<type> defaultValue)
{
    return defaultValue;
}

@Override
public <type> minIfEmpty(<type> defaultValue)
{
    return defaultValue;
}

@Override
public double average()
{
    throw new ArithmeticException();
}

@Override
public double median()
{
    throw new ArithmeticException();
}

@Override
public <type>[] toSortedArray()
{
    return new <type>[0];
}

@Override
public Mutable<name>List toSortedList()
{
    return new <name>ArrayList();
}

>>

noMethods() ::= ""
