import "copyright.stg"
import "primitiveLiteral.stg"

targetPath() ::= "org/eclipse/collections/impl/bag/immutable/primitive"

fileName(primitive) ::= "Immutable<primitive.name>HashBag"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.bag.immutable.primitive;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.Serializable;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.Lazy<name>Iterable;
import org.eclipse.collections.api.bag.ImmutableBag;
import org.eclipse.collections.api.bag.primitive.<name>Bag;
import org.eclipse.collections.api.bag.primitive.Immutable<name>Bag;
import org.eclipse.collections.api.bag.primitive.Mutable<name>Bag;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.block.function.primitive.Object<name>ToObjectFunction;
import org.eclipse.collections.api.block.predicate.primitive.<name>Predicate;
import org.eclipse.collections.api.block.procedure.primitive.<name>IntProcedure;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.iterator.<name>Iterator;
import org.eclipse.collections.api.list.primitive.Mutable<name>List;
import org.eclipse.collections.api.set.primitive.Mutable<name>Set;
import org.eclipse.collections.impl.bag.mutable.primitive.<name>HashBag;
import org.eclipse.collections.impl.block.procedure.checked.primitive.Checked<name>IntProcedure;
import org.eclipse.collections.impl.iterator.Unmodifiable<name>Iterator;

/**
 * Immutable<name>HashBag is the non-modifiable equivalent of {@link <name>HashBag}.
 * This file was automatically generated from template file immutablePrimitiveHashBag.stg.
 *
 * @since 4.0.
 */
final class Immutable<name>HashBag implements Immutable<name>Bag, Serializable
{
    private static final long serialVersionUID = 1L;

    private final Mutable<name>Bag delegate;

    private Immutable<name>HashBag(<type>[] newElements)
    {
        this.checkOptimizedSize(newElements.length);
        this.delegate = <name>HashBag.newBagWith(newElements);
    }

    private void checkOptimizedSize(int length)
    {
        if (length \<= 1)
        {
            throw new IllegalArgumentException("Use <name>Bags.immutable.with() to instantiate an optimized collection");
        }
    }

    public static Immutable<name>HashBag newBagWith(<type>... elements)
    {
        return new Immutable<name>HashBag(elements);
    }

    public Immutable<name>Bag newWith(<type> element)
    {
        return <name>HashBag.newBag(this.delegate).with(element).toImmutable();
    }

    public Immutable<name>Bag newWithout(<type> element)
    {
        <name>HashBag hashBag = <name>HashBag.newBag(this.delegate);
        hashBag.remove(element);
        return hashBag.toImmutable();
    }

    public Immutable<name>Bag newWithAll(<name>Iterable elements)
    {
        <name>HashBag bag = <name>HashBag.newBag(this.delegate);
        bag.addAll(elements);
        return bag.toImmutable();
    }

    public Immutable<name>Bag newWithoutAll(<name>Iterable elements)
    {
        <name>HashBag bag = <name>HashBag.newBag(this.delegate);
        bag.removeAll(elements);
        return bag.toImmutable();
    }

    public int size()
    {
        return this.delegate.size();
    }

    public boolean isEmpty()
    {
        return this.delegate.isEmpty();
    }

    public boolean notEmpty()
    {
        return this.delegate.notEmpty();
    }

    public boolean contains(<type> value)
    {
        return this.delegate.contains(value);
    }

    public boolean containsAll(<name>Iterable source)
    {
        return this.delegate.containsAll(source);
    }

    public boolean containsAll(<type>... elements)
    {
        return this.delegate.containsAll(elements);
    }

    public void forEach(<name>Procedure procedure)
    {
        this.each(procedure);
    }

    /**
     * @since 7.0.
     */
    public void each(<name>Procedure procedure)
    {
        this.delegate.forEach(procedure);
    }

    public Immutable<name>Bag select(<name>Predicate predicate)
    {
        return this.delegate.select(predicate).toImmutable();
    }

    public Immutable<name>Bag reject(<name>Predicate predicate)
    {
        return this.delegate.reject(predicate).toImmutable();
    }

    public \<V> ImmutableBag\<V> collect(<name>ToObjectFunction\<? extends V> function)
    {
        return this.delegate.collect(function).toImmutable();
    }

    public Mutable<name>List toList()
    {
        return this.delegate.toList();
    }

    public int sizeDistinct()
    {
        return this.delegate.sizeDistinct();
    }

    public int occurrencesOf(<type> item)
    {
        return this.delegate.occurrencesOf(item);
    }

    public void forEachWithOccurrences(<name>IntProcedure <type>IntProcedure)
    {
        this.delegate.forEachWithOccurrences(<type>IntProcedure);
    }

    public <type> detectIfNone(<name>Predicate predicate, <type> ifNone)
    {
        return this.delegate.detectIfNone(predicate, ifNone);
    }

    public int count(<name>Predicate predicate)
    {
        return this.delegate.count(predicate);
    }

    public boolean anySatisfy(<name>Predicate predicate)
    {
        return this.delegate.anySatisfy(predicate);
    }

    <(arithmeticMethods.(type))()>
    public boolean noneSatisfy(<name>Predicate predicate)
    {
        return this.delegate.noneSatisfy(predicate);
    }

    public boolean allSatisfy(<name>Predicate predicate)
    {
        return this.delegate.allSatisfy(predicate);
    }

    public \<T> T injectInto(T injectedValue, Object<name>ToObjectFunction\<? super T, ? extends T> function)
    {
        return this.delegate.injectInto(injectedValue, function);
    }

    @Override
    public boolean equals(Object obj)
    {
        return this.delegate.equals(obj);
    }

    @Override
    public int hashCode()
    {
        return this.delegate.hashCode();
    }

    public Mutable<name>Set toSet()
    {
        return this.delegate.toSet();
    }

    public Mutable<name>Bag toBag()
    {
        return this.delegate.toBag();
    }

    public Immutable<name>Bag toImmutable()
    {
        return this;
    }

    public Lazy<name>Iterable asLazy()
    {
        return this.delegate.asLazy();
    }

    public <type>[] toArray()
    {
        return this.delegate.toArray();
    }

    @Override
    public String toString()
    {
        return this.delegate.toString();
    }

    public String makeString()
    {
        return this.delegate.makeString();
    }

    public String makeString(String separator)
    {
        return this.delegate.makeString(separator);
    }

    public String makeString(String start, String separator, String end)
    {
        return this.delegate.makeString(start, separator, end);
    }

    public void appendString(Appendable appendable)
    {
        this.delegate.appendString(appendable);
    }

    public void appendString(Appendable appendable, String separator)
    {
        this.delegate.appendString(appendable, separator);
    }

    public void appendString(Appendable appendable, String start, String separator, String end)
    {
        this.delegate.appendString(appendable, start, separator, end);
    }

    public <name>Iterator <type>Iterator()
    {
        return new Unmodifiable<name>Iterator(this.delegate.<type>Iterator());
    }

    private Object writeReplace()
    {
        return new Immutable<name>BagSerializationProxy(this);
    }

    protected static class Immutable<name>BagSerializationProxy implements Externalizable
    {
        private static final long serialVersionUID = 1L;

        private <name>Bag bag;

        @SuppressWarnings("UnusedDeclaration")
        public Immutable<name>BagSerializationProxy()
        {
            // Empty constructor for Externalizable class
        }

        protected Immutable<name>BagSerializationProxy(<name>Bag bag)
        {
            this.bag = bag;
        }

        public void writeExternal(final ObjectOutput out) throws IOException
        {
            out.writeInt(this.bag.sizeDistinct());
            try
            {
                this.bag.forEachWithOccurrences(new Checked<name>IntProcedure()
                {
                    @Override
                    public void safeValue(<type> item, int count) throws IOException
                    {
                        out.write<name>(item);
                        out.writeInt(count);
                    }
                });
            }
            catch (RuntimeException e)
            {
                if (e.getCause() instanceof IOException)
                {
                    throw (IOException) e.getCause();
                }
                throw e;
            }
        }

        public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException
        {
            int size = in.readInt();
            Mutable<name>Bag deserializedBag = new <name>HashBag();

            for (int i = 0; i \< size; i++)
            {
                deserializedBag.addOccurrences(in.read<name>(), in.readInt());
            }

            this.bag = deserializedBag;
        }

        protected Object readResolve()
        {
            return this.bag.toImmutable();
        }
    }
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods() ::= <<
public <wideType.(type)> sum()
{
    return this.delegate.sum();
}

public <type> min()
{
    return this.delegate.min();
}

public <type> max()
{
    return this.delegate.max();
}

public <type> maxIfEmpty(<type> defaultValue)
{
    return this.delegate.maxIfEmpty(defaultValue);
}

public <type> minIfEmpty(<type> defaultValue)
{
    return this.delegate.minIfEmpty(defaultValue);
}

public double average()
{
    return this.delegate.average();
}

public double median()
{
    return this.delegate.median();
}

public <type>[] toSortedArray()
{
    return this.delegate.toSortedArray();
}

public Mutable<name>List toSortedList()
{
    return this.delegate.toSortedList();
}

>>

noMethods() ::= ""
