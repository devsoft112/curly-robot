import "copyright.stg"
import "primitiveLiteral.stg"

targetPath() ::= "org/eclipse/collections/impl/bag/immutable/primitive"

fileName(primitive) ::= "Immutable<primitive.name>EmptyBag"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.impl.bag.immutable.primitive;

import java.io.IOException;
import java.io.Serializable;
import java.util.NoSuchElementException;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.Lazy<name>Iterable;
import org.eclipse.collections.api.bag.ImmutableBag;
import org.eclipse.collections.api.bag.primitive.Immutable<name>Bag;
import org.eclipse.collections.api.bag.primitive.<name>Bag;
import org.eclipse.collections.api.bag.primitive.Mutable<name>Bag;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.block.function.primitive.Object<name>ToObjectFunction;
import org.eclipse.collections.api.block.predicate.primitive.IntPredicate;
import org.eclipse.collections.api.block.predicate.primitive.<name>Predicate;
import org.eclipse.collections.api.block.procedure.primitive.<name>IntProcedure;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.iterator.<name>Iterator;
import org.eclipse.collections.api.list.primitive.Mutable<name>List;
import org.eclipse.collections.api.set.primitive.Mutable<name>Set;
import org.eclipse.collections.impl.bag.mutable.primitive.<name>HashBag;
import org.eclipse.collections.impl.factory.Bags;
import org.eclipse.collections.impl.factory.primitive.<name>Bags;
import org.eclipse.collections.impl.iterator.ImmutableEmpty<name>Iterator;
import org.eclipse.collections.impl.lazy.primitive.Lazy<name>IterableAdapter;
import org.eclipse.collections.impl.list.mutable.primitive.<name>ArrayList;
import org.eclipse.collections.impl.set.mutable.primitive.<name>HashSet;
import org.eclipse.collections.api.list.ImmutableList;
import org.eclipse.collections.api.tuple.primitive.<name>IntPair;
import org.eclipse.collections.impl.factory.Lists;
import net.jcip.annotations.Immutable;

/**
 * Immutable<name>EmptyBag is an optimization for {@link Immutable<name>Bag} of size 0.
 * This file was automatically generated from template file immutablePrimitiveEmptyBag.stg.
 *
 * @since 4.0.
 */
@Immutable
final class Immutable<name>EmptyBag implements Immutable<name>Bag, Serializable
{
    static final Immutable<name>Bag INSTANCE = new Immutable<name>EmptyBag();

    private static final long serialVersionUID = 1L;

    private Object readResolve()
    {
        return INSTANCE;
    }

    public Immutable<name>Bag newWith(<type> element)
    {
        return new Immutable<name>SingletonBag(element);
    }

    public Immutable<name>Bag newWithout(<type> element)
    {
        return this;
    }

    public Immutable<name>Bag newWithAll(<name>Iterable elements)
    {
        return <name>Bags.immutable.withAll(elements);
    }

    public Immutable<name>Bag newWithoutAll(<name>Iterable elements)
    {
        return this;
    }

    public int size()
    {
        return 0;
    }

    public boolean isEmpty()
    {
        return true;
    }

    public boolean notEmpty()
    {
        return false;
    }

    public boolean contains(<type> value)
    {
        return false;
    }

    public boolean containsAll(<name>Iterable source)
    {
        return source.isEmpty();
    }

    public boolean containsAll(<type>... elements)
    {
        return elements.length == 0;
    }

    public void forEach(<name>Procedure procedure)
    {
    }

    /**
     * @since 7.0.
     */
    public void each(<name>Procedure procedure)
    {
    }

    public Immutable<name>Bag select(<name>Predicate predicate)
    {
        return this;
    }

    public Immutable<name>Bag reject(<name>Predicate predicate)
    {
        return this;
    }

    public \<V> ImmutableBag\<V> collect(<name>ToObjectFunction\<? extends V> function)
    {
        return Bags.immutable.of();
    }

    public Mutable<name>List toList()
    {
        return new <name>ArrayList();
    }

    public int sizeDistinct()
    {
        return 0;
    }

    public int occurrencesOf(<type> item)
    {
        return 0;
    }

    public void forEachWithOccurrences(<name>IntProcedure <type>IntProcedure)
    {
    }

    public Immutable<name>Bag selectByOccurrences(IntPredicate predicate)
    {
        return this;
    }

    public ImmutableList\<<name>IntPair> topOccurrences(int count)
    {
        if (count \< 0)
        {
            throw new IllegalArgumentException("Cannot use a value of count \< 0");
        }
        return Lists.immutable.empty();
    }

    public ImmutableList\<<name>IntPair> bottomOccurrences(int count)
    {
        if (count \< 0)
        {
            throw new IllegalArgumentException("Cannot use a value of count \< 0");
        }
        return Lists.immutable.empty();
    }

    public <type> detectIfNone(<name>Predicate predicate, <type> ifNone)
    {
        return ifNone;
    }

    public int count(<name>Predicate predicate)
    {
        return 0;
    }

    public boolean anySatisfy(<name>Predicate predicate)
    {
        return false;
    }

    <(arithmeticMethods.(type))()>
    public boolean noneSatisfy(<name>Predicate predicate)
    {
        return true;
    }

    public boolean allSatisfy(<name>Predicate predicate)
    {
        return true;
    }

    public \<T> T injectInto(T injectedValue, Object<name>ToObjectFunction\<? super T, ? extends T> function)
    {
        return injectedValue;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == this)
        {
            return true;
        }
        if (!(obj instanceof <name>Bag))
        {
            return false;
        }
        <name>Bag bag = (<name>Bag) obj;
        return bag.isEmpty();
    }

    @Override
    public int hashCode()
    {
        return 0;
    }

    public Mutable<name>Set toSet()
    {
        return new <name>HashSet();
    }

    public Mutable<name>Bag toBag()
    {
        return new <name>HashBag();
    }

    public Immutable<name>Bag toImmutable()
    {
        return this;
    }

    public Lazy<name>Iterable asLazy()
    {
        return new Lazy<name>IterableAdapter(this);
    }

    public <type>[] toArray()
    {
        return new <type>[0];
    }

    @Override
    public String toString()
    {
        return "[]";
    }

    public String makeString()
    {
        return "";
    }

    public String makeString(String separator)
    {
        return "";
    }

    public String makeString(String start, String separator, String end)
    {
        return start + end;
    }

    public void appendString(Appendable appendable)
    {
    }

    public void appendString(Appendable appendable, String separator)
    {
    }

    public void appendString(Appendable appendable, String start, String separator, String end)
    {
        try
        {
            appendable.append(start);
            appendable.append(end);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    public <name>Iterator <type>Iterator()
    {
        return ImmutableEmpty<name>Iterator.INSTANCE;
    }
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods() ::= <<
public <wideType.(type)> sum()
{
    return <wideZero.(type)>;
}

public <type> min()
{
    throw new NoSuchElementException();
}

public <type> max()
{
    throw new NoSuchElementException();
}

public <type> maxIfEmpty(<type> defaultValue)
{
    return defaultValue;
}

public <type> minIfEmpty(<type> defaultValue)
{
    return defaultValue;
}

public double average()
{
    throw new ArithmeticException();
}

public double median()
{
    throw new ArithmeticException();
}

public <type>[] toSortedArray()
{
    return new <type>[0];
}

public Mutable<name>List toSortedList()
{
    return new <name>ArrayList();
}

>>

noMethods() ::= ""
