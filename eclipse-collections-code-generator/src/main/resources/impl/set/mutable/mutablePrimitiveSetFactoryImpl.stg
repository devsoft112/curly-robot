import "copyrightAndOthers.stg"

targetPath() ::= "org/eclipse/collections/impl/set/mutable/primitive"

fileName(primitive) ::= "Mutable<primitive.name>SetFactoryImpl"

class(primitive) ::= <<
<body(primitive.type, primitive.name, primitive.wrapperName)>
>>

body(type, name, wrapperName) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.impl.set.mutable.primitive;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.factory.set.primitive.Mutable<name>SetFactory;
import org.eclipse.collections.api.set.primitive.Mutable<name>Set;
import org.eclipse.collections.impl.factory.primitive.<name>Sets;
import org.eclipse.collections.impl.utility.Iterate;
<(wideStreamImport.(type))>

/**
 * Mutable<name>SetFactoryImpl is a factory implementation which creates instances of type {@link Mutable<name>Set}.
 * This file was automatically generated from template file mutablePrimitiveSetFactoryImpl.stg.
 *
 * @since 6.0.
 */
public enum Mutable<name>SetFactoryImpl implements Mutable<name>SetFactory
{
    INSTANCE;

    @Override
    public Mutable<name>Set empty()
    {
        return new <name>HashSet();
    }

    @Override
    public Mutable<name>Set of()
    {
        return this.empty();
    }

    @Override
    public Mutable<name>Set with()
    {
        return this.empty();
    }
    <(capacityMethods.(type))()>

    @Override
    public Mutable<name>Set of(<type>... items)
    {
        return this.with(items);
    }

    @Override
    public Mutable<name>Set with(<type>... items)
    {
        if (items == null || items.length == 0)
        {
            return this.empty();
        }
        return <name>HashSet.newSetWith(items);
    }

    @Override
    public Mutable<name>Set ofAll(<name>Iterable items)
    {
        return this.withAll(items);
    }

    @Override
    public Mutable<name>Set withAll(<name>Iterable items)
    {
        return <name>HashSet.newSet(items);
    }

    /**
     * @since 10.0
     */
    @Override
    public Mutable<name>Set ofAll(Iterable\<<wrapperName>\> iterable)
    {
        return this.withAll(iterable);
    }

    /**
     * @since 10.0
     */
    @Override
    public Mutable<name>Set withAll(Iterable\<<wrapperName>\> iterable)
    {
        return Iterate.collect<name>(iterable, <wrapperName>::<type>Value, <name>Sets.mutable.empty());
    }
    <(streamMethods.(type))()>
}

>>

capacityMethods ::= [
    "byte": "noMethods",
    "short": "capacityMethods",
    "char": "capacityMethods",
    "int": "capacityMethods",
    "long": "capacityMethods",
    "float": "capacityMethods",
    "double": "capacityMethods",
    "boolean": "noMethods"
    ]

capacityMethods() ::= <<


@Override
public Mutable<name>Set withInitialCapacity(int capacity)
{
    return new <name>HashSet(capacity);
}
>>

streamMethods ::= [
    "byte": "noMethods",
    "short": "noMethods",
    "char": "noMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "noMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods() ::= <<


/**
 * @since 9.0
 */
@Override
public Mutable<name>Set ofAll(<(wideStream.(type))> items)
{
    return this.withAll(items);
}

/**
 * @since 9.0
 */
@Override
public Mutable<name>Set withAll(<(wideStream.(type))> items)
{
    return this.with(items.toArray());
}
>>

noMethods() ::= ""

wideStream ::= [
    "int": "IntStream",
    "long": "LongStream",
    "double": "DoubleStream",
    default: "no matching wide type"
]

wideStreamImport ::= [
    "boolean": "",
    "byte": "",
    "short": "",
    "char": "",
    "int": "import java.util.stream.IntStream;",
    "long": "import java.util.stream.LongStream;",
    "float": "",
    "double": "import java.util.stream.DoubleStream;",
    default: "no matching wide type"
]
