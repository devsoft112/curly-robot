import "copyrightAndOthers.stg"

targetPath() ::= "org/eclipse/collections/api/factory/map/primitive"

fileName(primitive) ::= "Mutable<primitive.name>ObjectMapFactory"

skipBoolean() ::= "true"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.api.factory.map.primitive;

import org.eclipse.collections.api.block.function.Function;
import org.eclipse.collections.api.block.function.primitive.<name>Function;
import org.eclipse.collections.api.map.primitive.Mutable<name>ObjectMap;
import org.eclipse.collections.api.map.primitive.<name>ObjectMap;

/**
 * A factory which creates instances of type {@link Mutable<name>ObjectMap}.
 * This file was automatically generated from template file mutablePrimitiveObjectMapFactory.stg.
 *
 * @since 6.0.
 */
public interface Mutable<name>ObjectMapFactory
{
    \<V> Mutable<name>ObjectMap\<V> empty();

    /**
     * Same as {@link #empty()}.
     */
    \<V> Mutable<name>ObjectMap\<V> of();

    /**
     * Same as {@link #empty()}.
     */
    \<V> Mutable<name>ObjectMap\<V> with();

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> of(<type> key, V value)
    {
        return this.with(key, value);
    }

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> with(<type> key, V value)
    {
        return this.\<V>with().withKeyValue(key, value);
    }

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> of(<type> key1, V value1, <type> key2, V value2)
    {
        return this.with(key1, value1, key2, value2);
    }

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> with(<type> key1, V value1, <type> key2, V value2)
    {
        return this.with(key1, value1).withKeyValue(key2, value2);
    }

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> of(<type> key1, V value1, <type> key2, V value2, <type> key3, V value3)
    {
        return this.with(key1, value1, key2, value2, key3, value3);
    }

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> with(<type> key1, V value1, <type> key2, V value2, <type> key3, V value3)
    {
        return this.with(key1, value1, key2, value2).withKeyValue(key3, value3);
    }

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> of(<type> key1, V value1, <type> key2, V value2, <type> key3, V value3, <type> key4, V value4)
    {
        return this.with(key1, value1, key2, value2, key3, value3, key4, value4);
    }

    /**
     * @since 11.1.
     */
    default \<V> Mutable<name>ObjectMap\<V> with(<type> key1, V value1, <type> key2, V value2, <type> key3, V value3, <type> key4, V value4)
    {
        return this.with(key1, value1, key2, value2, key3, value3).withKeyValue(key4, value4);
    }

    /**
     * Same as {@link #empty()}. but takes in an initial capacity
     */
    \<V> Mutable<name>ObjectMap\<V> ofInitialCapacity(int capacity);

    /**
     * Same as {@link #empty()}. but takes in an initial capacity
     */
    \<V> Mutable<name>ObjectMap\<V> withInitialCapacity(int capacity);

    /**
     * Same as {@link #withAll(<name>ObjectMap)}.
     */
    \<V> Mutable<name>ObjectMap\<V> ofAll(<name>ObjectMap\<? extends V> map);

    \<V> Mutable<name>ObjectMap\<V> withAll(<name>ObjectMap\<? extends V> map);

    /**
     * Creates an {@code Mutable<name>ObjectMap} from an {@code Iterable\<T>} by applying {@code keyFunction} and {@code valueFunction}.
     *
     * @since 10.0
     */
    \<T, V> Mutable<name>ObjectMap\<V> from(Iterable\<T> iterable, <name>Function\<? super T> keyFunction, Function\<? super T, ? extends V> valueFunction);
}

>>
