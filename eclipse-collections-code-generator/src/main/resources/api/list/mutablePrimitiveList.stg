import "copyrightAndOthers.stg"
import "primitiveAPI.stg"

targetPath() ::= "org/eclipse/collections/api/list/primitive"

fileName(primitive) ::= "Mutable<primitive.name>List"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.api.list.primitive;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.block.predicate.primitive.<name>Predicate;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.collection.primitive.Mutable<name>Collection;
import org.eclipse.collections.api.list.ListIterable;
import org.eclipse.collections.api.list.MutableList;
import org.eclipse.collections.api.tuple.primitive.<name><name>Pair;
import org.eclipse.collections.api.tuple.primitive.<name>ObjectPair;

/**
 * This file was automatically generated from template file mutablePrimitiveList.stg.
 *
 * @since 3.0.
 */
public interface Mutable<name>List extends Mutable<name>Collection, <name>List
{
    void addAtIndex(int index, <type> element);

    boolean addAllAtIndex(int index, <type>... source);

    boolean addAllAtIndex(int index, <name>Iterable source);

    <type> removeAtIndex(int index);

    <type> set(int index, <type> element);

    <sharedAPI(fileName(primitive), name)>

    <mutableAPI(fileName(primitive), type, name)>

    /**
     * @since 9.0.
     */
    @Override
    default Mutable<name>List tap(<name>Procedure procedure)
    {
        this.forEach(procedure);
        return this;
    }

    \<V> MutableList\<V> collect(<name>ToObjectFunction\<? extends V> function);

    Mutable<name>List reverseThis();

    @Override
    Mutable<name>List toReversed();

    /**
     * @since 6.0.
     */
    @Override
    Mutable<name>List distinct();

    <(arithmeticMethods.(type))(type)>
    @Override
    Mutable<name>List asUnmodifiable();

    @Override
    Mutable<name>List asSynchronized();

    /**
     * Returns an immutable copy of this list.
     */
    @Override
    Immutable<name>List toImmutable();

    @Override
    Mutable<name>List subList(int fromIndex, int toIndex);

    /**
     * Returns a {@code MutableList} formed from this {@code Mutable<name>List} and another {@code <name>List} by
     * combining corresponding elements in pairs. If one of the two {@code <name>List}s is longer than the other, its
     * remaining elements are ignored.
     *
     * @since 9.1.
     */
    default MutableList\<<name><name>Pair> zip<name>(<name>List list)
    {
        throw new UnsupportedOperationException("Default method to prevent breaking backwards compatibility");
    }

    /**
     * Returns a {@code MutableList} formed from this {@code Mutable<name>List} and a {@code ListIterable} by
     * combining corresponding elements in pairs. If one of the two Lists is longer than the other, its
     * remaining elements are ignored.
     *
     * @since 9.1.
     */
    default \<T> MutableList\<<name>ObjectPair\<T\>> zip(ListIterable\<T> list)
    {
        throw new UnsupportedOperationException("Default method to prevent breaking backwards compatibility");
    }
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
]

allMethods(type) ::= <<
/**
 * Sorts this list mutating its contents and returns the same mutable list (this).
 */
Mutable<name>List sortThis();

>>

noMethods(type) ::= ""
