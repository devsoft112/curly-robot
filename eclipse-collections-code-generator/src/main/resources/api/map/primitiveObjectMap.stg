import "copyright.stg"

skipBoolean() ::= "true"

targetPath() ::= "org/eclipse/collections/api/map/primitive"

fileName(primitive) ::= "<primitive.name>ObjectMap"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.api.map.primitive;

import java.util.Map;

import org.eclipse.collections.api.Lazy<name>Iterable;
import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.block.function.Function0;
import org.eclipse.collections.api.block.predicate.primitive.<name>ObjectPredicate;
import org.eclipse.collections.api.block.procedure.Procedure;
import org.eclipse.collections.api.block.procedure.primitive.<name>ObjectProcedure;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.set.primitive.Mutable<name>Set;
import org.eclipse.collections.api.tuple.primitive.<name>ObjectPair;

/**
 * This file was automatically generated from template file primitiveObjectMap.stg.
 *
 * @since 3.0.
 */
public interface <name>ObjectMap\<V> extends PrimitiveObjectMap\<V>
{
    V get(<type> key);

    V getIfAbsent(<type> key, Function0\<? extends V> ifAbsent);

    boolean containsKey(<type> key);

    @Override
    <name>ObjectMap\<V> tap(Procedure\<? super V> procedure);

    void forEachKey(<name>Procedure procedure);

    void forEachKeyValue(<name>ObjectProcedure\<? super V> procedure);

    <name>ObjectMap\<V> select(<name>ObjectPredicate\<? super V> predicate);

    <name>ObjectMap\<V> reject(<name>ObjectPredicate\<? super V> predicate);

    Immutable<name>ObjectMap\<V> toImmutable();

    Mutable<name>Set keySet();

    /**
     * @since 5.0
     */
    Lazy<name>Iterable keysView();

    /**
     * @since 5.0
     */
    RichIterable\<<name>ObjectPair\<V>\> keyValuesView();
}

>>
