import "copyrightAndOthers.stg"

targetPath() ::= "org/eclipse/collections/api/map/primitive"

fileName(primitive) ::= "MutableObject<primitive.name>Map"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyrightAndOthers()>

package org.eclipse.collections.api.map.primitive;

import org.eclipse.collections.api.block.function.primitive.<name>Function;
import org.eclipse.collections.api.block.function.primitive.<name>Function0;
import org.eclipse.collections.api.block.function.primitive.<name>To<name>Function;
import org.eclipse.collections.api.block.function.primitive.<name>ToObjectFunction;
import org.eclipse.collections.api.block.predicate.primitive.<name>Predicate;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.block.predicate.primitive.Object<name>Predicate;
import org.eclipse.collections.api.collection.MutableCollection;
import org.eclipse.collections.api.collection.primitive.Mutable<name>Collection;
import org.eclipse.collections.api.iterator.Mutable<name>Iterator;
import org.eclipse.collections.api.tuple.primitive.Object<name>Pair;

/**
 * This file was automatically generated from template file mutableObjectPrimitiveMap.stg.
 *
 * @since 3.0.
 */
public interface MutableObject<name>Map\<K> extends Object<name>Map\<K>
{
    @Override
    Mutable<name>Iterator <type>Iterator();

    void clear();

    void put(K key, <type> value);

    /**
     * This method allows MutableObject<name>Map the ability to add an element in the form of Object<name>Pair\<K>.
     *
     * @see #put(Object, <type>)
     * @since 9.1.0
     */
    default void putPair(Object<name>Pair\<K> keyValuePair)
    {
        this.put(keyValuePair.getOne(), keyValuePair.getTwo());
    }

    void putAll(Object<name>Map\<? extends K> map);

    void removeKey(K key);

    void remove(Object key);

    <type> removeKeyIfAbsent(K key, <type> value);

    <type> getIfAbsentPut(K key, <type> value);

    <type> getIfAbsentPut(K key, <name>Function0 function);

    <type> getIfAbsentPutWithKey(K key, <name>Function\<? super K> function);

    \<P> <type> getIfAbsentPutWith(K key, <name>Function\<? super P> function, P parameter);

    <type> updateValue(K key, <type> initialValueIfAbsent, <name>To<name>Function function);
    <if(!primitive.booleanPrimitive)><(flipUniqueValues.(name))(name)><endif>

    @Override
    MutableObject<name>Map\<K> select(Object<name>Predicate\<? super K> predicate);

    @Override
    MutableObject<name>Map\<K> reject(Object<name>Predicate\<? super K> predicate);

    @Override
    Mutable<name>Collection select(<name>Predicate predicate);

    @Override
    Mutable<name>Collection reject(<name>Predicate predicate);

    /**
     * @since 9.0.
     */
    default MutableObject<name>Map\<K> tap(<name>Procedure procedure)
    {
        this.forEach(procedure);
        return this;
    }

    @Override
    \<V> MutableCollection\<V> collect(<name>ToObjectFunction\<? extends V> function);

    MutableObject<name>Map\<K> withKeyValue(K key, <type> value);

    MutableObject<name>Map\<K> withoutKey(K key);

    MutableObject<name>Map\<K> withoutAllKeys(Iterable\<? extends K> keys);

    MutableObject<name>Map\<K> asUnmodifiable();

    MutableObject<name>Map\<K> asSynchronized();
    <(arithmeticMethods.(type))(type)>
}

>>

arithmeticMethods ::= [
    "byte": "allMethods",
    "short": "allMethods",
    "char": "allMethods",
    "int": "allMethods",
    "long": "allMethods",
    "float": "allMethods",
    "double": "allMethods",
    "boolean": "noMethods"
    ]

allMethods(type) ::= <<


<type> addToValue(K key, <type> toBeAdded);
>>

noMethods(type) ::= ""

flipUniqueValues ::= [
    "Byte": "flipUniqueValues",
    "Short": "flipUniqueValues",
    "Char": "flipUniqueValues",
    "Int": "flipUniqueValues",
    "Long": "flipUniqueValues",
    "Float": "flipUniqueValues",
    "Double": "flipUniqueValues",
    "Boolean": "noMethods"
    ]

flipUniqueValues(name) ::= <<


@Override
Mutable<name>ObjectMap\<K> flipUniqueValues();
>>
