import "copyright.stg"

targetPath() ::= "org/eclipse/collections/api/map/primitive"

fileName(primitive) ::= "Object<primitive.name>Map"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package org.eclipse.collections.api.map.primitive;

import java.util.Set;

import org.eclipse.collections.api.<name>Iterable;
import org.eclipse.collections.api.LazyIterable;
import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.block.predicate.primitive.Object<name>Predicate;
import org.eclipse.collections.api.block.procedure.Procedure;
import org.eclipse.collections.api.block.procedure.primitive.Object<name>Procedure;
import org.eclipse.collections.api.block.procedure.primitive.<name>Procedure;
import org.eclipse.collections.api.collection.primitive.Mutable<name>Collection;
import org.eclipse.collections.api.tuple.primitive.Object<name>Pair;

/**
 * This file was automatically generated from template file objectPrimitiveMap.stg.
 *
 * @since 3.0.
 */
public interface Object<name>Map\<K> extends <name>Iterable
{
    <type> get(Object key);

    <type> getOrThrow(Object key);

    <type> getIfAbsent(Object key, <type> ifAbsent);

    boolean containsKey(Object key);

    boolean containsValue(<type> value);

    void forEachValue(<name>Procedure procedure);

    void forEachKey(Procedure\<? super K> procedure);

    void forEachKeyValue(Object<name>Procedure\<? super K> procedure);

    Object<name>Map\<K> select(Object<name>Predicate\<? super K> predicate);

    Object<name>Map\<K> reject(Object<name>Predicate\<? super K> predicate);

    /**
     * Returns a string representation of this Object<name>Map. The string representation consists of a list of the
     * map's key-value pairs in the order they are returned by its iterator. The key and value in each key-value pair are separated
     * by a colon (\<tt>":"\</tt>) and each pair is enclosed in square brackets (\<tt>"[]"\</tt>). Adjacent key-value pairs
     * are separated by the characters \<tt>", "\</tt> (comma and space). Keys and values are converted to strings as by
     * String#valueOf().
     *
     * @return a string representation of this Object<name>Map
     */
    String toString();

    ImmutableObject<name>Map\<K> toImmutable();

    Set\<K> keySet();

    Mutable<name>Collection values();

    /**
     * @since 5.0
     */
    LazyIterable\<K> keysView();

    /**
     * @since 5.0
     */
    RichIterable\<Object<name>Pair\<K>\> keyValuesView();
}

>>
